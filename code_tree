// Code Tree
digraph {
	Root
	"#That is the portion that get's the Normal modules"
	Root -> "#That is the portion that get's the Normal modules"
	"import getpass, os, platform, socket, json, traceback, webbrowser"
	Root -> "import getpass, os, platform, socket, json, traceback, webbrowser"
	"from threading import Thread, Event"
	Root -> "from threading import Thread, Event"
	"from time import sleep"
	Root -> "from time import sleep"
	"from datetime import datetime"
	Root -> "from datetime import datetime"
	"#the settings class"
	Root -> "#the settings class"
	"class settings:"
	Root -> "class settings"
	"    #If the version is a release"
	"class settings" -> "    #If the version is a release"
	"    release=False"
	"class settings" -> "    release=False"
	"    #What version it is"
	"class settings" -> "    #What version it is"
	"    version=\"2.8\""
	"class settings" -> "    version=\"2.8\""
	"    beta_version=\"2.81\""
	"class settings" -> "    beta_version=\"2.81\""
	"    #variables for runtime"
	"class settings" -> "    #variables for runtime"
	"    config={}"
	"class settings" -> "    config={}"
	"    language=\"en\""
	"class settings" -> "    language=\"en\""
	"    upcheck=True"
	"class settings" -> "    upcheck=True"
	"    prompt=\"Input> \""
	"class settings" -> "    prompt=\"Input> \""
	"    ad=True"
	"class settings" -> "    ad=True"
	"    logg=True"
	"class settings" -> "    logg=True"
	"    log_module_ok=True"
	"class settings" -> "    log_module_ok=True"
	"    init=False"
	"class settings" -> "    init=False"
	"    start_time_check=True"
	"class settings" -> "    start_time_check=True"
	"    start=datetime.now() #The startup time needed for initial Startup"
	"class settings" -> "    start=datetime.now() #The startup time needed for initial Startup"
	"    start_time=\"\""
	"class settings" -> "    start_time=\"\""
	"    settings_module_ok=True"
	"class settings" -> "    settings_module_ok=True"
	"    timeread_module_ok=True"
	"class settings" -> "    timeread_module_ok=True"
	"    convert_module_ok=True"
	"class settings" -> "    convert_module_ok=True"
	"    helpfunctions_module_ok=True"
	"class settings" -> "    helpfunctions_module_ok=True"
	"    advert_module_ok=True"
	"class settings" -> "    advert_module_ok=True"
	"    password_module_ok=True"
	"class settings" -> "    password_module_ok=True"
	"    split_module_ok=True"
	"class settings" -> "    split_module_ok=True"
	"    #the username and system name"
	"class settings" -> "    #the username and system name"
	"    name=getpass.getuser()"
	"class settings" -> "    name=getpass.getuser()"
	"    host=socket.gethostname()"
	"class settings" -> "    host=socket.gethostname()"
	"class pwgen:"
	Root -> "class pwgen"
	"    password=\"\" #the generated password"
	"class pwgen" -> "    password=\"\" #the generated password"
	"    e=\"\" #if something went wrong from passwordgen"
	"class pwgen" -> "    e=\"\" #if something went wrong from passwordgen"
	"    autopwgen=\"null\" #if the password should have the same settings except length"
	"class pwgen" -> "    autopwgen=\"null\" #if the password should have the same settings except length"
	"    excluded_chars=\"\" #Excluded characters stored within the settings file"
	"class pwgen" -> "    excluded_chars=\"\" #Excluded characters stored within the settings file"
	"    include_uppercase=\"\" #if uppercase should be used defined from the settings file"
	"class pwgen" -> "    include_uppercase=\"\" #if uppercase should be used defined from the settings file"
	"    include_numbers=\"\" #if the password should have numbers defined by the settings file"
	"class pwgen" -> "    include_numbers=\"\" #if the password should have numbers defined by the settings file"
	"    include_specials=\"\" #if there are Special characters needed according to the Settings file."
	"class pwgen" -> "    include_specials=\"\" #if there are Special characters needed according to the Settings file."
	"#The class for the variables that are just variables."
	"class pwgen" -> "#The class for the variables that are just variables."
	"class variables:"
	Root -> "class variables"
	"    #The email adress to directly complain to me"
	"class variables" -> "    #The email adress to directly complain to me"
	"    mail=\"chaosminecraftmail@gmail.com\""
	"class variables" -> "    mail=\"chaosminecraftmail@gmail.com\""
	"    #There are the links that are for the people that snoop in my code to see something"
	"class variables" -> "    #There are the links that are for the people that snoop in my code to see something"
	"    release_site=\"https://github.com/Chaosminecraft/Text-converter/releases/\""
	"class variables" -> "    release_site=\"https":"//github.com/Chaosminecraft/Text-converter/releases/\""
	"    beta_site=\"https://github.com/Chaosminecraft/Text-Converter-Beta/\""
	"class variables" -> "    beta_site=\"https":"//github.com/Chaosminecraft/Text-Converter-Beta/\""
	"    public_archive=\"https://github.com/Chaosminecraft/Custom-Encoder\""
	"class variables" -> "    public_archive=\"https":"//github.com/Chaosminecraft/Custom-Encoder\""
	"    old_public_archive=\"https://drive.google.com/open?id=16AcLcgRRLlM7chKUi4eHgT-NOfBCnArM\""
	"class variables" -> "    old_public_archive=\"https":"//drive.google.com/open?id=16AcLcgRRLlM7chKUi4eHgT-NOfBCnArM\""
	"    #The converted text is here too"
	"class variables" -> "    #The converted text is here too"
	"    converted_text=\"\" #a basic version of what was last time converted"
	"class variables" -> "    converted_text=\"\" #a basic version of what was last time converted"
	"    detailed_converted_text=\"\" #A more detailed version of from what to what"
	"class variables" -> "    detailed_converted_text=\"\" #A more detailed version of from what to what"
	"#Basic System infos"
	"class variables" -> "#Basic System infos"
	"class SysInf:"
	Root -> "class SysInf"
	"    system=platform.system()"
	"class SysInf" -> "    system=platform.system()"
	"    version=platform.release()"
	"class SysInf" -> "    version=platform.release()"
	"    detail_version=platform.version()"
	"class SysInf" -> "    detail_version=platform.version()"
	"    cpu_architecture=platform.machine()"
	"class SysInf" -> "    cpu_architecture=platform.machine()"
	"    complete_system=f\"{system} {version}\""
	"class SysInf" -> "    complete_system=f\"{system} {version}\""
	"#the other .py files are getting loaded."
	"class SysInf" -> "#the other .py files are getting loaded."
	"try:"
	"class SysInf" -> try
	"    import requests"
	"class SysInf" -> "    import requests"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"Please install the module requests for update checking, for further information, write help requests\")"
	"class SysInf" -> "    print(\"Please install the module requests for update checking, for further information, write help requests\")"
	"    settings.upcheck=False"
	"class SysInf" -> "    settings.upcheck=False"
	"try:"
	"class SysInf" -> try
	"    from logger import log_init, log_system, log_info, log_warn, log_error"
	"class SysInf" -> "    from logger import log_init, log_system, log_info, log_warn, log_error"
	"    log_init(settings.logg)"
	"class SysInf" -> "    log_init(settings.logg)"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(f\"The logging module is missing/broken, IF that is unexpected, then try getting the latest version of {variables.release_site}\")"
	"class SysInf" -> "    print(f\"The logging module is missing/broken, IF that is unexpected, then try getting the latest version of {variables.release_site}\")"
	"    settings.log_module_ok=False"
	"class SysInf" -> "    settings.log_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from settings import settings_init, change_settings"
	"class SysInf" -> "    from settings import settings_init, change_settings"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(f'Warning: Settings cannot be Initialised/Changed for the moment (External Changing is still possible by makign a settings.json file with the right format or editing the existing one)\nThe format mentioned needed is: {\"language\": \"en\", \"ad\": false, \"prompt\": \"Volks@PC-Patrick ~ % \", \"update\": false, \"logging\": true}')"
	"class SysInf" -> "    print(f'Warning":" Settings cannot be Initialised/Changed for the moment (External Changing is still possible by makign a settings.json file with the right format or editing the existing one)\nThe format mentioned needed is": {"language": "en", "ad": false, "prompt": "Volks@PC-Patrick ~ % ", "update": false, "logging": true}')
	"    settings.settings_module_ok=False"
	"class SysInf" -> "    settings.settings_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from timeread import timereader, title_time "
	"class SysInf" -> "    from timeread import timereader, title_time "
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"Warning: Time can't be read or title time can't be set.\")"
	"class SysInf" -> "    print(\"Warning":" Time can't be read or title time can't be set.\")"
	"    settings.timeread_module_ok=False"
	"class SysInf" -> "    settings.timeread_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from converter import convert"
	"class SysInf" -> "    from converter import convert"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"The main funcionality of the project is currently not available.\")"
	"class SysInf" -> "    print(\"The main funcionality of the project is currently not available.\")"
	"    settings.convert_module_ok=False"
	"class SysInf" -> "    settings.convert_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from helpfunctions import mainhelp, converterhelp"
	"class SysInf" -> "    from helpfunctions import mainhelp, converterhelp"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"The main help page is unavailabel, A basic one is available as a backup.\")"
	"class SysInf" -> "    print(\"The main help page is unavailabel, A basic one is available as a backup.\")"
	"    settings.helpfunctions_module_ok=False"
	"class SysInf" -> "    settings.helpfunctions_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from advert import free_ad, get_game"
	"class SysInf" -> "    from advert import free_ad, get_game"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"The advert cannot be shown (shrugs)\")"
	"class SysInf" -> "    print(\"The advert cannot be shown (shrugs)\")"
	"    settings.advert_module_ok=False"
	"class SysInf" -> "    settings.advert_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from passwdgen import password_generator"
	"class SysInf" -> "    from passwdgen import password_generator"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"The Password Generator part is unavailable due to the file probably having a corruption.\")"
	"class SysInf" -> "    print(\"The Password Generator part is unavailable due to the file probably having a corruption.\")"
	"    settings.password_module_ok=False"
	"class SysInf" -> "    settings.password_module_ok=False"
	"try:"
	"class SysInf" -> try
	"    from SplitIt.backend import split"
	"class SysInf" -> "    from SplitIt.backend import split"
	"except ImportError:"
	"class SysInf" -> "except ImportError"
	"    print(\"The Split It project is not available at the moment.\")"
	"class SysInf" -> "    print(\"The Split It project is not available at the moment.\")"
	"    settings.split_module_ok=False"
	"class SysInf" -> "    settings.split_module_ok=False"
	"#The update checking function"
	"class SysInf" -> "#The update checking function"
	"def updatecheck():"
	"class SysInf" -> "def updatecheck()"
	"    #print(\"FUNCTION START\") #For checking if the function starts at all"
	"def updatecheck()" -> "    #print(\"FUNCTION START\") #For checking if the function starts at all"
	"    if settings.release==True:"
	"def updatecheck()" -> "    if settings.release==True"
	"        #print(\"RELEASE VERSION\") #says if it is a Release version."
	"def updatecheck()" -> "        #print(\"RELEASE VERSION\") #says if it is a Release version."
	"        link_ver=\"https://github.com/Chaosminecraft/Text-converter/raw/main/version.txt\""
	"def updatecheck()" -> "        link_ver=\"https":"//github.com/Chaosminecraft/Text-converter/raw/main/version.txt\""
	"        checked_version=requests.get(link_ver, allow_redirects=True)"
	"def updatecheck()" -> "        checked_version=requests.get(link_ver, allow_redirects=True)"
	"        checked_version=str(checked_version.content)[2:5]"
	"def updatecheck()" -> "        checked_version=str(checked_version.content)[2":"5]"
	"        #print(checked_version) #If the version from the internet doesn't give good results."
	"def updatecheck()" -> "        #print(checked_version) #If the version from the internet doesn't give good results."
	"        if checked_version>settings.version:"
	"def updatecheck()" -> "        if checked_version>settings.version"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Da ist eine neue version: {checked_version}\nDa ist der download link:â†“{settings.dl_link}\n\")"
	"def updatecheck()" -> "                print(f\"Da ist eine neue version":" {checked_version}\nDa ist der download link":â†“{settings.dl_link}\n")
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"There is a new version: {checked_version}\nThere is the download link:â†“{settings.dl_link}\n\")"
	"def updatecheck()" -> "                print(f\"There is a new version":" {checked_version}\nThere is the download link":â†“{settings.dl_link}\n")
	"            return"
	"def updatecheck()" -> "            return"
	"        elif checked_version==settings.version:"
	"def updatecheck()" -> "        elif checked_version==settings.version"
	"            if settings.language == \"de\":"
	"def updatecheck()" -> "            if settings.language == \"de\""
	"                print(f\"\nDie version {settings.version} ist die neuste im moment.\n\")"
	"def updatecheck()" -> "                print(f\"\nDie version {settings.version} ist die neuste im moment.\n\")"
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"\nThe version {settings.version} is the latest version at the moment.\n\")"
	"def updatecheck()" -> "                print(f\"\nThe version {settings.version} is the latest version at the moment.\n\")"
	"            return"
	"def updatecheck()" -> "            return"
	"        elif checked_version<settings.version:"
	"def updatecheck()" -> "        elif checked_version<settings.version"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Man muss sich nicht schÃ¤men, ein Entwickler zu sein \n\")"
	"def updatecheck()" -> "                print(f\"Man muss sich nicht schÃ¤men, ein Entwickler zu sein \n\")"
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"No need to be ashamed to be a dev \n\")"
	"def updatecheck()" -> "                print(f\"No need to be ashamed to be a dev \n\")"
	"            return"
	"def updatecheck()" -> "            return"
	"        else:"
	"def updatecheck()" -> "        else"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Eine unbekannte version wurde gefunden. :(\n\")"
	"def updatecheck()" -> "                print(f\"Eine unbekannte version wurde gefunden. ":"(\n\")"
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"An unknown version was found. :(\n\")"
	"def updatecheck()" -> "                print(f\"An unknown version was found. ":"(\n\")"
	"            return"
	"def updatecheck()" -> "            return"
	"    elif settings.release==False:"
	"def updatecheck()" -> "    elif settings.release==False"
	"        #print(\"BETA RELEASE\") Says if it is a Beta version."
	"def updatecheck()" -> "        #print(\"BETA RELEASE\") Says if it is a Beta version."
	"        link_ver=\"https://github.com/Chaosminecraft/Text-converter/raw/Beta/betaversion.txt\""
	"def updatecheck()" -> "        link_ver=\"https":"//github.com/Chaosminecraft/Text-converter/raw/Beta/betaversion.txt\""
	"        checked_version=requests.get(link_ver, allow_redirects=True, timeout=10)"
	"def updatecheck()" -> "        checked_version=requests.get(link_ver, allow_redirects=True, timeout=10)"
	"        checked_version=str(checked_version.content)[2:5]"
	"def updatecheck()" -> "        checked_version=str(checked_version.content)[2":"5]"
	"        #print(checked_version) #If the version from the internet doesn't give good results."
	"def updatecheck()" -> "        #print(checked_version) #If the version from the internet doesn't give good results."
	"        if checked_version>settings.beta_version:"
	"def updatecheck()" -> "        if checked_version>settings.beta_version"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Da ist eine neue beta version: {checked_version}\nDa ist der Download link: {settings.beta_channel}\n\")"
	"def updatecheck()" -> "                print(f\"Da ist eine neue beta version":" {checked_version}\nDa ist der Download link": {settings.beta_channel}\n")
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"There is a new beta version, Download it here: {checked_version}\nThere is the download link: {settings.beta_channel}\n\")"
	"def updatecheck()" -> "                print(f\"There is a new beta version, Download it here":" {checked_version}\nThere is the download link": {settings.beta_channel}\n")
	"            return"
	"def updatecheck()" -> "            return"
	"        elif checked_version==settings.beta_version:"
	"def updatecheck()" -> "        elif checked_version==settings.beta_version"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Die version {settings.beta_version} ist die neuste Beta version.\n\")"
	"def updatecheck()" -> "                print(f\"Die version {settings.beta_version} ist die neuste Beta version.\n\")"
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"The beta verision {settings.beta_version} is the latest version right now.\n\")"
	"def updatecheck()" -> "                print(f\"The beta verision {settings.beta_version} is the latest version right now.\n\")"
	"            return"
	"def updatecheck()" -> "            return"
	"        elif checked_version<settings.beta_version:"
	"def updatecheck()" -> "        elif checked_version<settings.beta_version"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Hallo Mitprogrammierer :)\")"
	"def updatecheck()" -> "                print(f\"Hallo Mitprogrammierer ":")\")"
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"Hello fellow coder :)\n\")"
	"def updatecheck()" -> "                print(f\"Hello fellow coder ":")\n\")"
	"            return"
	"def updatecheck()" -> "            return"
	"        else:"
	"def updatecheck()" -> "        else"
	"            if settings.language==\"de\":"
	"def updatecheck()" -> "            if settings.language==\"de\""
	"                print(f\"Eine unbekannte beta version wurde gefunden :(\n\")"
	"def updatecheck()" -> "                print(f\"Eine unbekannte beta version wurde gefunden ":"(\n\")"
	"            else:"
	"def updatecheck()" -> "            else"
	"                print(f\"An unknown beta version was found :(\n\")"
	"def updatecheck()" -> "                print(f\"An unknown beta version was found ":"(\n\")"
	"            return"
	"def updatecheck()" -> "            return"
	"class threads:"
	"class SysInf" -> "class threads"
	"    updatethread=Thread(target=updatecheck)"
	"class threads" -> "    updatethread=Thread(target=updatecheck)"
	"    stop_event=Event()"
	"class threads" -> "    stop_event=Event()"
	"    if settings.timeread_module_ok==True:"
	"class threads" -> "    if settings.timeread_module_ok==True"
	"        titletime=\"\""
	"class threads" -> "        titletime=\"\""
	"text=f\"The platform uses: \n                {SysInf.complete_system} build {SysInf.detail_version}\n                With the architecture: {SysInf.cpu_architecture}\n\""
	"class threads" -> "text=f\"The platform uses":" \n                {SysInf.complete_system} build {SysInf.detail_version}\n                With the architecture": {SysInf.cpu_architecture}\n"
	"if settings.log_module_ok==True:"
	"class threads" -> "if settings.log_module_ok==True"
	"    log_system(text)"
	"class threads" -> "    log_system(text)"
	"elif SysInf.system==\"'Linux'\":"
	"class threads" -> "elif SysInf.system==\"'Linux'\""
	"    print(\"[WARNING] Linux may not work on all versions...\")"
	"class threads" -> "    print(\"[WARNING] Linux may not work on all versions...\")"
	"elif SysInf.system==\"'Darwin'\":"
	"class threads" -> "elif SysInf.system==\"'Darwin'\""
	"    print(f\"[WARNING] MacOS and other Darwin based systems can't be tested, it may not work!\n\")"
	"class threads" -> "    print(f\"[WARNING] MacOS and other Darwin based systems can't be tested, it may not work!\n\")"
	"else:"
	"class threads" -> else
	"    print(\"I can't gauge how good the code runs, I don't know what system that is. \")"
	"class threads" -> "    print(\"I can't gauge how good the code runs, I don't know what system that is. \")"
	"def init():"
	"class threads" -> "def init()"
	"    while True:"
	"def init()" -> "    while True"
	"        try: #If there is a invalid string in the settings and the Default settings are required"
	"def init()" -> "        try":" #If there is a invalid string in the settings and the Default settings are required"
	"            while True:"
	"def init()" -> "            while True"
	"                try: #Trying to load the settings file."
	"def init()" -> "                try":" #Trying to load the settings file."
	"                    with open(\"settings.json\", \"r\") as file:"
	"def init()" -> "                    with open(\"settings.json\", \"r\") as file"
	"                        settings.config=json.load(file)"
	"def init()" -> "                        settings.config=json.load(file)"
	"                    settings.language=settings.config.get(\"language\")"
	"def init()" -> "                    settings.language=settings.config.get(\"language\")"
	"                    settings.ad=settings.config.get(\"advert\")"
	"def init()" -> "                    settings.ad=settings.config.get(\"advert\")"
	"                    settings.prompt=settings.config.get(\"prompt\")"
	"def init()" -> "                    settings.prompt=settings.config.get(\"prompt\")"
	"                    settings.upcheck=settings.config.get(\"update\")"
	"def init()" -> "                    settings.upcheck=settings.config.get(\"update\")"
	"                    settings.logg=settings.config.get(\"logging\")"
	"def init()" -> "                    settings.logg=settings.config.get(\"logging\")"
	"                    pwgen.autopwgen=settings.config.get(\"autopwgen\")"
	"def init()" -> "                    pwgen.autopwgen=settings.config.get(\"autopwgen\")"
	"                    pwgen.excluded_chars=settings.config.get(\"excludedchars\")"
	"def init()" -> "                    pwgen.excluded_chars=settings.config.get(\"excludedchars\")"
	"                    if pwgen.excluded_chars==None:"
	"def init()" -> "                    if pwgen.excluded_chars==None"
	"                        pwgen.excluded_chars=\"\""
	"def init()" -> "                        pwgen.excluded_chars=\"\""
	"                    pwgen.include_uppercase=settings.config.get(\"includeuppercase\")"
	"def init()" -> "                    pwgen.include_uppercase=settings.config.get(\"includeuppercase\")"
	"                    pwgen.include_numbers=settings.config.get(\"includenumbers\")"
	"def init()" -> "                    pwgen.include_numbers=settings.config.get(\"includenumbers\")"
	"                    pwgen.include_specials=settings.config.get(\"includespecials\")"
	"def init()" -> "                    pwgen.include_specials=settings.config.get(\"includespecials\")"
	"                    break"
	"def init()" -> "                    break"
	"                except FileNotFoundError: #If the File didn't exist"
	"def init()" -> "                except FileNotFoundError":" #If the File didn't exist"
	"                    settings_init(name=settings.name, host=settings.host)"
	"def init()" -> "                    settings_init(name=settings.name, host=settings.host)"
	"        except: #if the Default settings are required"
	"def init()" -> "        except":" #if the Default settings are required"
	"            error=traceback.format_exc()"
	"def init()" -> "            error=traceback.format_exc()"
	"            formatted_error=f\"There has been a settings Specific settings error that is currently unable to be fixed. Please manually repair the settings file if possible. THere is more information about the crash:\n{error}\""
	"def init()" -> "            formatted_error=f\"There has been a settings Specific settings error that is currently unable to be fixed. Please manually repair the settings file if possible. THere is more information about the crash":"\n{error}\""
	"            print(formatted_error)"
	"def init()" -> "            print(formatted_error)"
	"            if settings.log_module_ok==True:"
	"def init()" -> "            if settings.log_module_ok==True"
	"                log_system(formatted_error)"
	"def init()" -> "                log_system(formatted_error)"
	"            print(f\"\nThere is the option to report it to the GitHub page as an problem, Do you wanna open the site?\")"
	"def init()" -> "            print(f\"\nThere is the option to report it to the GitHub page as an problem, Do you wanna open the site?\")"
	"            while True:"
	"def init()" -> "            while True"
	"                if input(\"Yes or No? \").lower()==\"yes\":"
	"def init()" -> "                if input(\"Yes or No? \").lower()==\"yes\""
	"                    if settings.release==True:"
	"def init()" -> "                    if settings.release==True"
	"                        webbrowser.open(variables.release_site)"
	"def init()" -> "                        webbrowser.open(variables.release_site)"
	"                        break"
	"def init()" -> "                        break"
	"                    elif settings.release==False:"
	"def init()" -> "                    elif settings.release==False"
	"                        webbrowser.open(variables.beta_site)"
	"def init()" -> "                        webbrowser.open(variables.beta_site)"
	"                        break"
	"def init()" -> "                        break"
	"                    else:"
	"def init()" -> "                    else"
	"                        print(\"I'm sorry, there is only Yes or No... :( )\")"
	"def init()" -> "                        print(\"I'm sorry, there is only Yes or No... ":"( )\")"
	"            print(f\"Due to a Settings error the Default settings are used.\n\")"
	"def init()" -> "            print(f\"Due to a Settings error the Default settings are used.\n\")"
	"            settings.language=\"en\""
	"def init()" -> "            settings.language=\"en\""
	"            settings.ad=False"
	"def init()" -> "            settings.ad=False"
	"            settings.prompt=\"Input: \""
	"def init()" -> "            settings.prompt=\"Input":" \""
	"            settings.upcheck=True"
	"def init()" -> "            settings.upcheck=True"
	"            settings.logg=True"
	"def init()" -> "            settings.logg=True"
	"        if settings.ad==True:"
	"def init()" -> "        if settings.ad==True"
	"            if settings.init==True:"
	"def init()" -> "            if settings.init==True"
	"                free_ad(settings.language, settings.logg)"
	"def init()" -> "                free_ad(settings.language, settings.logg)"
	"        if settings.init==False:"
	"def init()" -> "        if settings.init==False"
	"            if settings.timeread_module_ok==True:"
	"def init()" -> "            if settings.timeread_module_ok==True"
	"                threads.titletime=Thread(target=title_time, args=(settings, SysInf.system, threads.stop_event, ))"
	"def init()" -> "                threads.titletime=Thread(target=title_time, args=(settings, SysInf.system, threads.stop_event, ))"
	"                threads.titletime.start()"
	"def init()" -> "                threads.titletime.start()"
	"        if settings.init==False:"
	"def init()" -> "        if settings.init==False"
	"            if settings.upcheck==True:"
	"def init()" -> "            if settings.upcheck==True"
	"                threads.updatethread.start()"
	"def init()" -> "                threads.updatethread.start()"
	"        if SysInf.system==\"Linux\":"
	"def init()" -> "        if SysInf.system==\"Linux\""
	"            print(\"I'M aware that some issues may come at a few versions on that Project...\")"
	"def init()" -> "            print(\"I'M aware that some issues may come at a few versions on that Project...\")"
	"        if settings.release==False:"
	"def init()" -> "        if settings.release==False"
	"            if settings.language==\"de\":"
	"def init()" -> "            if settings.language==\"de\""
	"                print(f\"Willkommen zur Beta version vom Text converter. Bitte beschwer dich bei der Beta seite bei problemen. Sie ist bei {variables.beta_site}\")"
	"def init()" -> "                print(f\"Willkommen zur Beta version vom Text converter. Bitte beschwer dich bei der Beta seite bei problemen. Sie ist bei {variables.beta_site}\")"
	"            else:"
	"def init()" -> "            else"
	"                print(f\"Welcome to the currently Beta version of Text Converter. Please complain on the Beta GitHub Site about issues. it is at {variables.beta_site}\")"
	"def init()" -> "                print(f\"Welcome to the currently Beta version of Text Converter. Please complain on the Beta GitHub Site about issues. it is at {variables.beta_site}\")"
	"        elif settings.release==True:"
	"def init()" -> "        elif settings.release==True"
	"            if settings.language==\"de\":"
	"def init()" -> "            if settings.language==\"de\""
	"                print(f\"Willkommen zur Beta version vom Text converter. Bitte beschwer dich bei der Beta seite bei problemen. Sie ist bei {variables.release_site}\")"
	"def init()" -> "                print(f\"Willkommen zur Beta version vom Text converter. Bitte beschwer dich bei der Beta seite bei problemen. Sie ist bei {variables.release_site}\")"
	"            else:"
	"def init()" -> "            else"
	"                print(f\"Welcome to the currently Beta version of Text Converter. Please complain on the Beta GitHub Site about issues. it is at {variables.release_site}\")"
	"def init()" -> "                print(f\"Welcome to the currently Beta version of Text Converter. Please complain on the Beta GitHub Site about issues. it is at {variables.release_site}\")"
	"        else:"
	"def init()" -> "        else"
	"            print(\"There are some settings issues, Please delete the settings.json and restart the program.\")"
	"def init()" -> "            print(\"There are some settings issues, Please delete the settings.json and restart the program.\")"
	"        main()"
	"def init()" -> "        main()"
	"# Hauptprogramm anpassen, um den neuen Befehl zu integrieren"
	"def init()" -> "# Hauptprogramm anpassen, um den neuen Befehl zu integrieren"
	"def main():"
	"def init()" -> "def main()"
	"    try:"
	"def main()" -> "    try"
	"        try:"
	"def main()" -> "        try"
	"            try:"
	"def main()" -> "            try"
	"                if settings.upcheck == True:"
	"def main()" -> "                if settings.upcheck == True"
	"                    if settings.init == False:"
	"def main()" -> "                    if settings.init == False"
	"                        threads.updatethread.join()"
	"def main()" -> "                        threads.updatethread.join()"
	"                if settings.start_time_check == True:"
	"def main()" -> "                if settings.start_time_check == True"
	"                    settings.start_time = datetime.now() - settings.start"
	"def main()" -> "                    settings.start_time = datetime.now() - settings.start"
	"                    if settings.language == \"de\":"
	"def main()" -> "                    if settings.language == \"de\""
	"                        print(f\"Der Start brauchte {settings.start_time} Sekunden.\n\")"
	"def main()" -> "                        print(f\"Der Start brauchte {settings.start_time} Sekunden.\n\")"
	"                    else:"
	"def main()" -> "                    else"
	"                        print(f\"The startup needed {settings.start_time} seconds.\n\")"
	"def main()" -> "                        print(f\"The startup needed {settings.start_time} seconds.\n\")"
	"                    text = f\"The program needed {settings.start_time} seconds to start up.\""
	"def main()" -> "                    text = f\"The program needed {settings.start_time} seconds to start up.\""
	"                    log_system(text)"
	"def main()" -> "                    log_system(text)"
	"                while True:"
	"def main()" -> "                while True"
	"                    settings.init = True"
	"def main()" -> "                    settings.init = True"
	"                    command = input(settings.prompt).lower()"
	"def main()" -> "                    command = input(settings.prompt).lower()"
	"                    if command == \"\":"
	"def main()" -> "                    if command == \"\""
	"                        if settings.language == \"de\":"
	"def main()" -> "                        if settings.language == \"de\""
	"                            print(\"Nope, da ist nicht ein command wo nichts als input ist.\")"
	"def main()" -> "                            print(\"Nope, da ist nicht ein command wo nichts als input ist.\")"
	"                        else:"
	"def main()" -> "                        else"
	"                            print(\"Nope, there is not a command that has 0 Characters.\")"
	"def main()" -> "                            print(\"Nope, there is not a command that has 0 Characters.\")"
	"                    else:"
	"def main()" -> "                    else"
	"                        text = f\"Command used was: {command}\""
	"def main()" -> "                        text = f\"Command used was":" {command}\""
	"                        log_info(text=text, logg=settings.logg)"
	"def main()" -> "                        log_info(text=text, logg=settings.logg)"
	"                    if command == \"test\":"
	"def main()" -> "                    if command == \"test\""
	"                        print(f\"\nTest OK\n\")"
	"def main()" -> "                        print(f\"\nTest OK\n\")"
	"                        text = \"Test Successful\""
	"def main()" -> "                        text = \"Test Successful\""
	"                        log_info(text=text, logg=settings.logg)"
	"def main()" -> "                        log_info(text=text, logg=settings.logg)"
	"                    elif command == \"leetspeak\" or command == \"leetcode\":"
	"def main()" -> "                    elif command == \"leetspeak\" or command == \"leetcode\""
	"                        if settings.language == \"de\":"
	"def main()" -> "                        if settings.language == \"de\""
	"                            print(f\"\nDieses Feature wurde permanent entfernt!\n\")"
	"def main()" -> "                            print(f\"\nDieses Feature wurde permanent entfernt!\n\")"
	"                        else:"
	"def main()" -> "                        else"
	"                            print(f\"\nThis feature is permanently removed!\n\")"
	"def main()" -> "                            print(f\"\nThis feature is permanently removed!\n\")"
	"                    elif command == \"phex\" or command == \"pbin\" or command == \"legacy pbin\" or command == \"hex\" or command == \"bin\" or command == \"ascii\" or command == \"brainfuck\" or command == \"base64\" or command == \"symbenc\":"
	"def main()" -> "                    elif command == \"phex\" or command == \"pbin\" or command == \"legacy pbin\" or command == \"hex\" or command == \"bin\" or command == \"ascii\" or command == \"brainfuck\" or command == \"base64\" or command == \"symbenc\""
	"                        variables.converted_text = convert(command, settings.language, settings.logg)"
	"def main()" -> "                        variables.converted_text = convert(command, settings.language, settings.logg)"
	"                    elif command == \"last conversion\":"
	"def main()" -> "                    elif command == \"last conversion\""
	"                        print(variables.converted_text)"
	"def main()" -> "                        print(variables.converted_text)"
	"                    elif command == \"help\" or command == \"helpsite\":"
	"def main()" -> "                    elif command == \"help\" or command == \"helpsite\""
	"                        mainhelp(command, settings.language)"
	"def main()" -> "                        mainhelp(command, settings.language)"
	"                    elif command == \"language\" or command == \"prompt\" or command == \"ad\" or command == \"update\" or command == \"logging\" or command==\"auto password\" or command==\"excluded chars\" or command==\"include uppercase\" or command==\"include numbers\" or command==\"include specials\":"
	"def main()" -> "                    elif command == \"language\" or command == \"prompt\" or command == \"ad\" or command == \"update\" or command == \"logging\" or command==\"auto password\" or command==\"excluded chars\" or command==\"include uppercase\" or command==\"include numbers\" or command==\"include specials\""
	"                        settings.prompt, settings.language, settings.ad, settings.upcheck, settings.logg, pwgen.autopwgen, pwgen.excluded_chars, pwgen.include_uppercase, pwgen.include_numbers, pwgen.include_specials = change_settings("
	"def main()" -> "                        settings.prompt, settings.language, settings.ad, settings.upcheck, settings.logg, pwgen.autopwgen, pwgen.excluded_chars, pwgen.include_uppercase, pwgen.include_numbers, pwgen.include_specials = change_settings("
	"                            target=command, prom=settings.prompt, language=settings.language, logging=settings.logg,"
	"def main()" -> "                            target=command, prom=settings.prompt, language=settings.language, logging=settings.logg,"
	"                            host=settings.host, name=settings.name, version=SysInf.version, system=SysInf.complete_system"
	"def main()" -> "                            host=settings.host, name=settings.name, version=SysInf.version, system=SysInf.complete_system"
	"                        )"
	"def main()" -> "                        )"
	"                    elif command == \"reset settings\":"
	"def main()" -> "                    elif command == \"reset settings\""
	"                        settings_init(name=settings.name, host=settings.host)"
	"def main()" -> "                        settings_init(name=settings.name, host=settings.host)"
	"                    elif command == \"check update\":"
	"def main()" -> "                    elif command == \"check update\""
	"                        updatecheck()"
	"def main()" -> "                        updatecheck()"
	"                    elif command == \"password generator\" or command == \"passwort generator\" or command == \"passwordgen\" or command == \"pwgen\":"
	"def main()" -> "                    elif command == \"password generator\" or command == \"passwort generator\" or command == \"passwordgen\" or command == \"pwgen\""
	"                        pwgen.e, pwgen.password=password_generator(settings, pwgen, variables)  # Neuer Passwort-Generator-Befehl"
	"def main()" -> "                        pwgen.e, pwgen.password=password_generator(settings, pwgen, variables)  # Neuer Passwort-Generator-Befehl"
	"                    elif command == \"manualtraceback\":"
	"def main()" -> "                    elif command == \"manualtraceback\""
	"                        text = f\"There as an unexpected error, There is a traceback:\n{traceback.format_exc()}\""
	"def main()" -> "                        text = f\"There as an unexpected error, There is a traceback":"\n{traceback.format_exc()}\""
	"                        log_system(text)"
	"def main()" -> "                        log_system(text)"
	"                    elif command == \"split it test module\":"
	"def main()" -> "                    elif command == \"split it test module\""
	"                        split(standalone=False)"
	"def main()" -> "                        split(standalone=False)"
	"                    elif command == \"split it\":"
	"def main()" -> "                    elif command == \"split it\""
	"                        split(standalone=True)"
	"def main()" -> "                        split(standalone=True)"
	"            except AttributeError:"
	"def main()" -> "            except AttributeError"
	"                pass"
	"def main()" -> "                pass"
	"        except KeyboardInterrupt:"
	"def main()" -> "        except KeyboardInterrupt"
	"            temp=\"\" #Put closing function here"
	"def main()" -> "            temp=\"\" #Put closing function here"
	"    except:"
	"def main()" -> "    except"
	"            traced = traceback.format_exc()"
	"def main()" -> "            traced = traceback.format_exc()"
	"            if settings.language == \"de\":"
	"def main()" -> "            if settings.language == \"de\""
	"                print(f\"\n Ein unerwarteter Fehler erschien, Hier ist was passierte:\n{traced}\n\")"
	"def main()" -> "                print(f\"\n Ein unerwarteter Fehler erschien, Hier ist was passierte":"\n{traced}\n\")"
	"            else:"
	"def main()" -> "            else"
	"                print(f\"\nAn unexpected error occurred... there is a trace:\n{traced}\n\")"
	"def main()" -> "                print(f\"\nAn unexpected error occurred... there is a trace":"\n{traced}\n\")"
	"            text = f\"There as an unexpected error, There is a traceback:\n{traced}\""
	"def main()" -> "            text = f\"There as an unexpected error, There is a traceback":"\n{traced}\""
	"            log_system(text)"
	"def main()" -> "            log_system(text)"
	"if __name__ == \"__main__\":"
	"def main()" -> "if __name__ == \"__main__\""
	"    init()"
	"def main()" -> "    init()"
}
