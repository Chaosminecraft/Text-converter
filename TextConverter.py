#importing time from time to look about the Time needed to do the initialisation part
from datetime import datetime
start=datetime.now()

def ModuleRecovery(module):
    if module == "requests":
        os.system("pip install requests")

    if module == "converter":
        data=""
        out=base64.b64decode(data)
        with open("converter.py", "w") as save:
            save.write(out)
    
    if module == "learn":
        data="aW1wb3J0IHdlYmJyb3dzZXIgYXMgd2ViDQpmcm9tIGxvZ2dlciBpbXBvcnQgbG9nX2luZm8NCg0KZGVmIGZyZWVfYWQobGFuZ3VhZ2UsIGxvZ2cpOg0KICAgIHRyeToNCiAgICAgICAgaWYgbGFuZ3VhZ2U9PSJkZSI6DQogICAgICAgICAgICBwcmludChmIlxuW0FEXSBTcGllbCBtYWwgd2hpbGUgVHJ1ZTogbGVhcm4oKSwgZXMgaXN0IGVpbiBndXRlcyBzcGllbC5cbldvIG1hbiBkYXMgU3BpZWwgaG9sZW4ga2FubiBzaWVodCBtYW4gbWl0IGRlbSBjb21tYW5kOiBnZXQgZ2FtZVxuV2VubiBkdSBkaWVzZSB3ZXJidW5nIG5pY2h0IG1lciBzZWhlbiB3aWxsc3QsIHNjaHJlaWI6IGFkIHNldHRpbmciKQ0KICAgICAgICBpZiBsYW5ndWFnZT09ImVuIjoNCiAgICAgICAgICAgIHByaW50KGYiXG5bQURdIFBsYXkgd2hpbGUgVHJ1ZTogbGVhcm4oKSwgaXQncyBhIGdvb2QgZ2FtZS5cbllvdSBjYW4gc2VlIHdoZXJlIHlvdSBjYW4gZ2V0IHRoZSBnYW1lIHdpdGggdGhlIGNvbW1hbmQ6IGdldCBnYW1lXG5JZiB5b3UgZG9uJ3Qgd2FudCB0byBzZWUgdGhpcyBhZCBhZ2Fpbiwgd3JpdGU6IGFkIHNldHRpbmciKQ0KICAgICAgICB0ZXh0PSJBZCBoYXMgYmVlbiBnaXZlbiwgYnV0IGkgZG9uJ3QgZ2V0IHBhaWQgb2YgdGhhdC4iDQogICAgICAgIGxvZ19pbmZvKHRleHQsIGxvZ2cpDQogICAgICAgIHJldHVybg0KDQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICByZXR1cm4NCg0KZGVmIGdldF9nYW1lKGxhbmd1YWdlLCBsb2dnKToNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpZiBsYW5ndWFnZT09ImRlIjoNCiAgICAgICAgICAgICAgICBwcmludCgiRGEgc2luZCBkaWVzZSBTdG9yZXM6XG4xLiBzdGVhbVxuMi4gZXBpYyBnYW1lcyBzdG9yZVxuMy4gaHVtYmxlXG40LiBHb29nbGUgUGxheVxuNS4gQXBwbGUgU3RvcmVcbjYuIE5pbnRlbmRvXG43LiBQbGF5c3RhdGlvbiA0XG44LiBHYWxheHkgU3RvcmVcbjkuIGdvZ1xuMTAuIGx1ZGVuLmlvXG4xMS4gRXhpdCBnZWh0IHp1csO8Y2sgenVtIHRleHQgY29udmVydGVyIFByb2pla3QuIikNCiAgICAgICAgICAgICAgICBhbnM9aW5wdXQoIlZvbiB3ZWxjaGVtIHN0b3JlIG3DtmNodGVzdCBkdSBlczogIikNCiAgICAgICAgICAgICAgICBhbnM9YW5zLmxvd2VyKCkNCiAgICAgICAgICAgICAgICB0ZXh0PWFucw0KICAgICAgICAgICAgICAgIGxvZ19pbmZvKHRleHQsIGxvZ2cpDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIGxhbmd1YWdlPT0iZW4iOg0KICAgICAgICAgICAgICAgIHByaW50KCJ0aGVyZSBhcmUgdGhvc2Ugc3RvcmVzOlxuMS4gc3RlYW1cbjIuIGVwaWMgZ2FtZXMgc3RvcmVcbjMuIGh1bWJsZVxuNC4gR29vZ2xlIFBsYXlcbjUuIEFwcGxlIFN0b3JlXG42LiBOaW50ZW5kb1xuNy4gUGxheXN0YXRpb24gNFxuOC4gR2FsYXh5IFN0b3JlXG45LiBnb2dcbjEwLiBFeGl0IGdvZXMgdG8gdGhlIFRleHQgY29udmVydGVyIFByb2plY3QuIikNCiAgICAgICAgICAgICAgICBhbnM9aW5wdXQoImZyb20gd2hhdCBzdG9yZSBkbyB5b3Ugd2FudCBpdDogIikNCiAgICAgICAgICAgICAgICB0ZXh0PWFucw0KICAgICAgICAgICAgICAgIGxvZ19pbmZvKHRleHQpDQoNCiAgICAgICAgICAgIGlmIGFucz09InN0ZWFtIiBvciBhbnM9PSIxIjoNCiAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2FwcC82MTkxNTAvd2hpbGVfVHJ1ZV9sZWFybi8iKQ0KICAgICAgICAgICAgaWYgYW5zPT0iZXBpYyBnYW1lcyBzdG9yZSIgb3IgYW5zPT0iMiI6DQogICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vd3d3LmVwaWNnYW1lcy5jb20vc3RvcmUvZW4tVVMvcC93aGlsZS10cnVlLWxlYXJuIikNCiAgICAgICAgICAgIGlmIGFucz09Imh1bWJsZSIgb3IgYW5zPT0iMyI6DQogICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vd3d3Lmh1bWJsZWJ1bmRsZS5jb20vc3RvcmUvd2hpbGUtdHJ1ZS1sZWFybiIpDQogICAgICAgICAgICBpZiBhbnM9PSJnb29nbGUgcGxheSIgb3IgYW5zPT0iNCI6DQogICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD1jb20ubml2YWwud3RsbSIpDQogICAgICAgICAgICBpZiBhbnM9PSJhcHBsZSBzdG9yZSIgb3IgYW5zPT0iNSI6DQogICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9hcHAvd2hpbGUtdHJ1ZS1sZWFybi9pZDE0NDM1NjkxMjQiKQ0KICAgICAgICAgICAgaWYgYW5zPT0ic3dpdGNoIHN0b3JlIiBvciBhbnM9PSI2IjoNCiAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly93d3cubmludGVuZG8uY29tL2dhbWVzL2RldGFpbC93aGlsZS10cnVlLWxlYXJuLXN3aXRjaC8iKQ0KICAgICAgICAgICAgaWYgYW5zPT0icGxheXN0YXRpb24gNCIgb3IgYW5zPT0iNyI6DQogICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vc3RvcmUucGxheXN0YXRpb24uY29tL2VuLXVzL3Byb2R1Y3QvVVAzMzkwLUNVU0EyMDQ0OV8wMC1BQUFBQUFBMDAwMDAwMDAxIikNCiAgICAgICAgICAgIGlmIGFucz09ImdhbGF4eSBzdG9yZSIgb3IgYW5zPT0iOCI6DQogICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHA6Ly9nYWxheHlzdG9yZS5zYW1zdW5nLmNvbS9kZXRhaWwvY29tLm5pdmFsLnd0bG0uZ3MiKQ0KICAgICAgICAgICAgaWYgYW5zPT0iZ29nIiBvciBhbnMubG93ZXIoKT09IjkiOg0KICAgICAgICAgICAgICAgIHdlYi5vcGVuKCJodHRwczovL3d3dy5nb2cuY29tL2dhbWUvd2hpbGVfdHJ1ZV9sZWFybiIpDQogICAgICAgICAgICBpZiBhbnM9PSJsdWRlbi5pbyIgb3IgYW5zPT0iMTAiOg0KICAgICAgICAgICAgICAgIHdlYi5vcGVuKCJodHRwczovL2x1ZGVuLmlvL3d0bC8iKQ0KICAgICAgICAgICAgaWYgYW5zPT0iZXhpdCIgb3IgYW5zPT0iMTEiOg0KICAgICAgICAgICAgICAgIHByaW50KCkNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2U9PSJlbiI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYic29ycnksIGRpZXNlciBzdG9yZSBoYXQgZGFzIHNwaWVsIGluIGRlciB2ZXJzaW9uIHZvbiBkaWVzZW0gV2VyYnVuZyBtb2R1bC4gOihcbiIpDQogICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2U9PSJkZSI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiaSdtIHNvcnJ5LCB0aGF0IHNob3AgaGFzIGluIHRoYXQgbW9kdWxlIHZlcnNpb24gbm90IHRoZSBnYW1lLiA6KFxuIikNCg0KICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6DQogICAgICAgICAgICBwcmludCgpDQogICAgICAgICAgICByZXR1cm4="
        out=base64.b64decode(data)
        with open("learn.py", "w") as save:
            save.write(out)

    if module == "logger":
        data="aW1wb3J0IGxvZ2dpbmcNCmZyb20gZGF0ZXRpbWUgaW1wb3J0ICoNCmltcG9ydCBvcw0KDQpkZWYgbG9nX2luaXQobG9nZ19tYWtlZmlsZSk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0idHJ1ZSI6DQogICAgICAgICAgICBub3c9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgICAgIHRpbWU9bm93LnN0cmZ0aW1lKCIlZC4lbS4lWSAlSC4lTS4lUyIpDQogICAgICAgICAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGZpbGVuYW1lPWYibG9ncy97dGltZX0gbG9nZy50eHQiLCBmaWxlbW9kZT0idyIsIGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKG1lc3NhZ2UpcyIsIGRhdGVmbXQ9IiVkLyVtLyVZICVIOiVNOiVTIikNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0iZmFsc2UiOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBvcy5ta2RpcigibG9ncyIpDQogICAgICAgIGxvZ19pbml0KGxvZ2dfbWFrZWZpbGUpDQoNCmRlZiBsb2dfc3lzdGVtKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltTWVNURU1dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2luZm8odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW0lORk9dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX3dhcm4odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW1dBUk5JTkddIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy53YXJuKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2Vycm9yKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltFUlJPUl0ge3RleHR9Ig0KICAgICAgICBsb2dnaW5nLmVycm9yKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0K"
        out=base64.b64decode(data)
        with open("logger.py", "w") as save:
            save.write(out)

    if module == "settings":
        data="aW1wb3J0IGxvZ2dpbmcNCmZyb20gZGF0ZXRpbWUgaW1wb3J0ICoNCmltcG9ydCBvcw0KDQpkZWYgbG9nX2luaXQobG9nZ19tYWtlZmlsZSk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0idHJ1ZSI6DQogICAgICAgICAgICBub3c9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgICAgIHRpbWU9bm93LnN0cmZ0aW1lKCIlZC4lbS4lWSAlSC4lTS4lUyIpDQogICAgICAgICAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGZpbGVuYW1lPWYibG9ncy97dGltZX0gbG9nZy50eHQiLCBmaWxlbW9kZT0idyIsIGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKG1lc3NhZ2UpcyIsIGRhdGVmbXQ9IiVkLyVtLyVZICVIOiVNOiVTIikNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0iZmFsc2UiOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBvcy5ta2RpcigibG9ncyIpDQogICAgICAgIGxvZ19pbml0KGxvZ2dfbWFrZWZpbGUpDQoNCmRlZiBsb2dfc3lzdGVtKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltTWVNURU1dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2luZm8odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW0lORk9dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX3dhcm4odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW1dBUk5JTkddIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy53YXJuKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2Vycm9yKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltFUlJPUl0ge3RleHR9Ig0KICAgICAgICBsb2dnaW5nLmVycm9yKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0K"
        out=base64.b64decode(data)
        with open("settings.py", "w") as save:
            save.write(out)
    
    if module == "timeread":
        data="aW1wb3J0IG9zDQppbXBvcnQgc3lzIGFzIHN5c3QNCmZyb20gdGltZSBpbXBvcnQgIHNsZWVwDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KDQpmcm9tIGxvZ2dlciBpbXBvcnQgbG9nX2luZm8NCg0KZGVmIHRpbWVyZWFkZXIobGFuZ3VhZ2UsIGxvZ2cpOg0KICAgIGlmIGxhbmd1YWdlID09ICJlbiI6DQogICAgICAgIG5vdz1kYXRldGltZS5ub3coKQ0KICAgICAgICBwcmludChmIlxuVGhlIHRpbWUgaXM6Iiwgbm93LnN0cmZ0aW1lKCIlbS8lZC8lWSwgJXIiKSwgIlxuIikNCg0KICAgICAgICB0ZXh0PWRhdGV0aW1lLm5vdygpDQogICAgICAgIHRleHQ9dGV4dC5zdHJmdGltZSgiJW0vJWQvJVksICVyIikNCiAgICAgICAgbG9nX2luZm8odGV4dCwgbG9nZykNCg0KICAgICAgICByZXR1cm4NCg0KICAgIGlmIGxhbmd1YWdlID09ICJkZSI6DQogICAgICAgIG5vdz1kYXRldGltZS5ub3coKQ0KICAgICAgICBwcmludChmIlxuRGllIHplaXQgaXN0OiIsIG5vdy5zdHJmdGltZSgiJWQvJW0vJVksICVIOiVNOiVTIiksICJcbiIpDQoNCiAgICAgICAgDQogICAgICAgIHRleHQ9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgdGV4dD10ZXh0LnN0cmZ0aW1lKCIlZC8lbS8lWSwgJUg6JU06JVMiKQ0KICAgICAgICBsb2dfaW5mbyh0ZXh0LCBsb2dnKQ0KDQogICAgICAgIHJldHVybg0KDQpkZWYgdGl0bGVfdGltZShzdG9wX2V2ZW50LCBsYW5ndWFnZSk6DQogICAgc3lzPW9wZW4oInN5c3RlbS50eHQiLCAiciIpLnJlYWQoKQ0KICAgIHdoaWxlIG5vdCBzdG9wX2V2ZW50LmlzX3NldCgpOg0KICAgICAgICBpZiBzeXM9PSJXaW5kb3dzIjoNCiAgICAgICAgICAgIG5vdz1kYXRldGltZS5ub3coKQ0KICAgICAgICAgICAgaWYgbGFuZ3VhZ2U9PSJkZSI6DQogICAgICAgICAgICAgICAgbm93PW5vdy5zdHJmdGltZSgiJWQvJW0vJVksICVIOiVNOiVTIikNCiAgICAgICAgICAgIGlmIGxhbmd1YWdlPT0iZW4iOg0KICAgICAgICAgICAgICAgIG5vdz1ub3cuc3RyZnRpbWUoIiVtLyVkLyVZLCAlciIpDQoNCiAgICAgICAgICAgIG9zLnN5c3RlbShmInRpdGxlIFRleHQgQ29udmVydGVyIFYyLjMge25vd30iKQ0KICAgICAgICAgICAgc2xlZXAoMSkNCg0KICAgICAgICBpZiBzeXM9PSJMaW51eCI6DQogICAgICAgICAgICBub3c9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgICAgIG5vdz1ub3cuc3RyZnRpbWUoIiVkLyVtLyVZLCAlSDolTTolUyIpDQogICAgICAgICAgICBzeXN0LnN0ZG91dC53cml0ZShmIlx4MWJdMjtUZXh0IENvbnZlcnRlciBWMi4zIHtub3d9XHgwNyIpDQogICAgICAgICAgICAjcHJpbnQoIlRpbWUgVXBkYXRlZCIpIHNvbWVob3cgdGhhdCBmaXhlcyB0aGUgdGl0bGUuLi4NCiAgICAgICAgICAgIHNsZWVwKDEpDQogICAgI2V4aXQoKQ0K"
        out=base64.b64decode(data)
        with open("timeread.py", "w") as save:
            save.write(out)
    
    if module == "updater":
        data="I2ltcG9ydGluZyB0aGUgbmVlZGVkIG1vZHVsZXMNCmltcG9ydCByZXF1ZXN0cw0KaW1wb3J0IGxvZ2dlcg0KDQojVmFyaWFibGVzIGZvciB0aGUgY29kZQ0KbGluaz0iaHR0cHM6Ly9naXRodWIuY29tL0NoYW9zbWluZWNyYWZ0L1RleHQtY29udmVydGVyL3JlbGVhc2VzLyINCg0KI3RoZSBtYWluIGZ1bmN0aW9uIG9mIHRoYXQgY29kZQ0KZGVmIHVwZGF0ZShyZWxlYXNlLCBsYW5ndWFnZSwgdmVyc2lvbik6DQogICAgdHJ5OiAjVHJ5aW5nIHRvIENoZWNrIGZvciB1cGRhdGVzDQogICAgICAgIGlmIHJlbGVhc2U9PVRydWU6DQogICAgICAgICAgICB1cmwgPSAiaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy9hNXdjN29vbjY4bno5aW8vdmVyc2lvbi1iZXRhLnR4dD9kbD0xIg0KICAgICAgICAgICAgbmV3X3ZlcnNpb24gPSByZXF1ZXN0cy5nZXQodXJsLCBhbGxvd19yZWRpcmVjdHM9VHJ1ZSkNCiAgICAgICAgICAgIG5ld192ZXJzaW9uPXN0cihuZXdfdmVyc2lvbi5jb250ZW50KVsyOjVdDQogICAgICAgICAgICAjcHJpbnQobmV3X3ZlcnNpb24pICNkZWJ1ZyBwdXJwb3NlDQoNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIGlmIG5ld192ZXJzaW9uPnZlcnNpb246DQogICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZW4iOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVGhlcmUgaXMgYW4gbmV3IHZlcnNpb246IHtuZXdfdmVyc2lvbn1cblRoZXJlIGlzIGRvd25sb2FkIHRoZSBsaW5rOuKGk1xue2xpbmt9XG4iKQ0KDQogICAgICAgICAgICAgICAgZWxpZiBsYW5ndWFnZS5sb3dlcigpID09ICJkZSI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5EYSBpc3QgZWluZSBuZXVlIFZlcnNpb246IHtuZXdfdmVyc2lvbn1cbkRhIGlzdCBkZXIgbGluayB6dW0gaGVydW50ZXJsYWRlbjrihpNcbntsaW5rfVxuIikNCg0KICAgICAgICAgICAgICAgIGVsaWYgbGFuZ3VhZ2UubG93ZXIoKSE9ImRlIiBvciBsYW5ndWFnZS5sb3dlcigpIT0iZW4iOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVGhlcmUgaXMgYW4gbmV3IHZlcnNpb246IHtuZXdfdmVyc2lvbn1cblRoZXJlIGlzIHRoZSBkb3dubG9hZCBsaW5rOuKGk1xue2xpbmt9XG4iKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgICAgICBlbGlmIG5ld192ZXJzaW9uPT12ZXJzaW9uOg0KICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZSB2ZXJzaW9uIGlzIHRoZSBsYXRlc3QgdmVyc2lvbiBhdCB0aGUgbW9tZW50LlxuIikNCg0KICAgICAgICAgICAgICAgIGVsaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZGUiOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuRGFzIGlzdCBkaWUgbmV1c3RlIHZlcnNpb24gaW0gbW9tZW50LlxuIikNCg0KICAgICAgICAgICAgICAgIGVsaWYgbGFuZ3VhZ2UubG93ZXIoKSE9ImRlIiBhbmQgbGFuZ3VhZ2UubG93ZXIoKSE9ImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZSB2ZXJzaW9uIGlzIHRoZSBsYXRlc3QgdmVyc2lvbiBhdCB0aGUgbW9tZW50LlxuIikNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIGVsaWYgbmV3X3ZlcnNpb248dmVyc2lvbjoNCiAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJlbiI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5BcmUgeW91IGEgRGV2P1xuIikNCg0KICAgICAgICAgICAgICAgIGVsaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZGUiOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuQmlzdCBkdSBlaW4gZGV2P1xuIikNCg0KICAgICAgICAgICAgICAgIGVsaWYgbGFuZ3VhZ2UubG93ZXIoKSE9ImRlIiBhbmQgbGFuZ3VhZ2UubG93ZXIoKSE9ImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcbkFyZSB5b3UgYSBEZXY/XG4iKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblVOS05PV04gVkVSU0lPTi5cbiIpDQoNCiAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJkZSI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5VTkJFS0FOTlRFIFZFUlNJT05cbiIpDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkhPSJkZSIgb3IgbGFuZ3VhZ2UubG93ZXIoKSE9ImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblVOS05PV04gVkVSU0lPTi5cbiIpDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIA0KICAgICAgICBpZiByZWxlYXNlPT1GYWxzZToNCiAgICAgICAgICAgIHVybD0iaHR0cHM6Ly93d3cuZHJvcGJveC5jb20vcy9hNXdjN29vbjY4bno5aW8vdmVyc2lvbi1iZXRhLnR4dD9kbD0xIg0KICAgICAgICAgICAgbmV3X3ZlcnNpb24gPSByZXF1ZXN0cy5nZXQodXJsLCBhbGxvd19yZWRpcmVjdHM9VHJ1ZSkNCiAgICAgICAgICAgIG5ld192ZXJzaW9uPXN0cihuZXdfdmVyc2lvbi5jb250ZW50KVsyOjVdDQogICAgICAgICAgICAjcHJpbnQobmV3X3ZlcnNpb24pI2ZvciBkZWJ1Z2dpbmcNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgbmV3X3ZlcnNpb24+dmVyc2lvbjoNCiAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJlbiI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVGhlcmUgaXMgYW4gbmV3IGJldGEgdmVyc2lvbjoge25ld192ZXJzaW9ufVxuVGhlcmUgaXMgZG93bmxvYWQgdGhlIGxpbms64oaTXG57bGlua31cbiIpDQoNCiAgICAgICAgICAgICAgICBlbGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImRlIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcbkRhIGlzdCBlaW5lIG5ldWUgYmV0YSB2ZXJzaW9uOiB7bmV3X3ZlcnNpb259XG5EYSBpc3QgZGVyIGxpbmsgenVtIGhlcnVudGVybGFkZW464oaTXG57bGlua31cbiIpDQoNCiAgICAgICAgICAgICAgICBlbGlmIGxhbmd1YWdlLmxvd2VyKCkhPSJkZSIgb3IgbGFuZ3VhZ2UubG93ZXIoKSE9ImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZXJlIGlzIGFuIG5ldyBiZXRhIHZlcnNpb246IHtuZXdfdmVyc2lvbn1cblRoZXJlIGlzIHRoZSBkb3dubG9hZCBsaW5rOuKGk1xue2xpbmt9XG4iKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbGlmIG5ld192ZXJzaW9uPT12ZXJzaW9uOg0KICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImVuIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5UaGUgdmVyc2lvbiBpcyB0aGUgbGF0ZXN0IGJldGEgdmVyc2lvbiBhdCB0aGUgbW9tZW50LlxuIikNCg0KICAgICAgICAgICAgICAgIGVsaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZGUiOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuRGFzIGlzdCBkaWUgbmV1c3RlIGJldGEgdmVyc2lvbiBpbSBtb21lbnQuXG4iKQ0KDQogICAgICAgICAgICAgICAgZWxpZiBsYW5ndWFnZS5sb3dlcigpIT0iZGUiIG9yIGxhbmd1YWdlLmxvd2VyKCkhPSJlbiI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGxhbmd1YWdlKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVGhlIHZlcnNpb24gaXMgdGhlIGxhdGVzdCBiZXRhIHZlcnNpb24gYXQgdGhlIG1vbWVudC5cbiIpDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICANCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZW4iOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVU5LTk9XTiBCRVRBIFZFUlNJT05cbiIpDQoNCiAgICAgICAgICAgICAgICBlbGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImRlIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblVOQkVLQU5OVEUgQkVUQSBWRVJTSU9OXG4iKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBlbGlmIGxhbmd1YWdlLmxvd2VyKCkhPSJkZSIgb3IgbGFuZ3VhZ2UubG93ZXIoKSE9ImVuIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblVOS05PV04gQkVUQSBWRVJTSU9OXG4iKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KDQogICAgI05vIGludGVybmV0IENvbm5lY3Rpb24gZm91bmQsIHVwZGF0ZSBDaGVja2luZyBjYW4ndCBiZSBkb25lLg0KICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjogI3RoYW5rcyBUaXp6eVNhdXJ1cyBmb3IgaGVscGluZyBtZSBnZXR0aW5nIHRoYXQgY2F0Y2guIDopDQogICAgICAgIA0KICAgICAgICBpZiBsYW5ndWFnZT09ImVuIjoNCiAgICAgICAgICAgIHByaW50KGYiXG5DdXJyZW50bHkgdGhlcmUgaXMgbm8gaW50ZXJuZXQsIFRyeSBjaGVja2luZyBmb3IgdXBkYXRlcyBsYXRlciB3aGVuIGEgaW50ZXJuZXQgY29ubmVjdGlvbiBleGlzdHMvaXMgc3RhYmxlLlxuIikNCiAgICAgICAgICAgIA0KICAgICAgICBpZiBsYW5ndWFnZT09ImRlIjoNCiAgICAgICAgICAgIHByaW50KGYiXG5Nb21lbnRhbiBpc3QgZGEga2VpbiBpbnRlcm5ldCwgVmVyc3VjaCBlcyBzcMOkdGVyIG5vY2htYWwgd2VubiBkaWUgSW50ZXJuZXR2ZXJiaW5kdW5nIGRhIGlzdC9TdGFiaWwgaXN0LlxuIikNCiAgICAgICAgICAgIA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQoZiJcbkN1cnJlbnRseSB0aGVyZSBpcyBubyBpbnRlcm5ldCwgVHJ5IGNoZWNraW5nIGZvciB1cGRhdGVzIGxhdGVyIHdoZW4gYSBpbnRlcm5ldCBjb25uZWN0aW9uIGV4aXN0cy9pcyBzdGFibGUuXG4iKQ0KICAgICAgICAgICAgDQogICAgICAgIHJldHVybg0KDQpkZWYgVGVzdCgpOg0KICAgIHdoaWxlIFRydWU6DQogICAgICAgIGxhbmd1YWdlPWlucHV0KCJERS9FTiAiKS5sb3dlcigpDQogICAgICAgIHJlbGVhc2U9aW5wdXQoIlRSVUUvRkFMU0UgIikubG93ZXIoKQ0KICAgICAgICBpZiByZWxlYXNlPT0idHJ1ZSI6DQogICAgICAgICAgICByZWxlYXNlPVRydWUNCiAgICAgICAgaWYgcmVsZWFzZT09ImZhbHNlIjoNCiAgICAgICAgICAgIHJlbGVhc2U9RmFsc2UNCiAgICAgICAgdmVyc2lvbj1pbnB1dCgiVkVSOiAiKQ0KICAgICAgICB1cGRhdGUocmVsZWFzZSwgbGFuZ3VhZ2UsIHZlcnNpb24pDQoNCiNUZXN0KCk="
        out=base64.b64decode(out)
        with open("updater.py", "w") as save:
            save.write(out)

#importing the Needed modules
while True:
    try:
        count=0
        import requests
        count+=1
        if count>0:
            break
    except ImportError:
        module="requests"
        ModuleRecovery(module)

import getpass
import os 
import platform
import socket
import json
from threading import Thread, Event

#just there to test Settings
#try:
#    os.remove("settings.json")
#except FileNotFoundError:
#    pass

#the Variables for the Logger module
logg="true"
logg_makefile="true"

#the Links for the download of older/newer versions.
dl_link="https://github.com/Chaosminecraft/Text-converter/releases/"
old_link="https://drive.google.com/open?id=16AcLcgRRLlM7chKUi4eHgT-NOfBCnArM"
old_repo="https://github.com/Chaosminecraft/Custom-Encoder"

#for some reason that logging function is needed...
def log_module_load(module):
    text=f"The module {module} has been loaded."
    log_system(text, logg)
    return

def log_module_error(module):
    text=f"The module {module} couldn't be loaded, please check the file for corruptions."
    log_error(text, logg)
    return

done = False



#custom modules are being imported now.
while True:
    try:
        module="logger"
        from logger import log_init, log_system, log_info, log_error
        log_init(logg_makefile) #making the log file
        log_module_load(module)
        module="settings"
        from settings import migrate_settings, settings_init, change_settings, helper
        log_module_load(module)
        module="learn"
        from learn import free_ad, get_game
        log_module_load(module)
        module="updater"
        from updater import *
        log_module_load(module)
        module="converter"
        from converter import *
        log_module_load(module)
        module="timeread"
        from timeread import *
        log_module_load(module)
        done = True
        if done == True:
            break
    except ModuleNotFoundError:
        log_module_error(module)
        ModuleRecovery(module)
        #input(f"\nThere has been a import error, please check the logs in the logs folder.\nPress enter to Exit")
        #exit()

sys=platform.system()
ver=platform.release()
cpu=platform.machine()
#print(cpu)
arc=platform.architecture()[1]
system=f"{sys} {ver}"
text=f"{system} with the architecture of {cpu}"
log_system(text, logg=True)

if sys=="Windows":
    if ver>="10":
        text="The Recommend OS is used."
        log_info(logg, text)
    if ver=="8.1":
        text="That operating system should work."
        log_warn(logg, text)
    if ver=="7":
        text="That is my Favourite OS, but problems may occure."
        log_info(logg, text)
    
if sys=="'Linux'":
    print("[WARNING] Linux is not checked anymore. it Might close. Continue?")
    log_warn(logg, text="[WARNING] Linux is not checked anymore. it Might close.")
    answer=input("Yes/No ")
    if answer.lower()=="no" or answer.lower()=="nein":
        exit()
    else:
        pass

if sys=="Darwin":
    print("This platform is not supported!")
    input("press enter to exit")
    exit()


#email adress for project
mail="chaosminecraftmail@gmail.com"

#determins if release or not and determins the version.
release=True
version="2.4"

#variables for the rest of startup
init="false"
check_init_time=False
language="en"
error_reason=""
settings=""
prompt=""
ad=""
upcheck="true"
module=""
rversion="2.4"
bversion="2.3"
updatethread=""

stop_event = Event()

#loading the settings
def settingsload():
    global language
    global ad
    global prompt
    global upcheck
    global logg
    while True:
        try:
            with open("settings.json", "r") as file:
                settings=json.load(file)
                language=settings.get("language")
                ad=settings.get("ad")
                prompt=settings.get("prompt")
                upcheck=settings.get("update")
                ldset=True
                if ldset==True:
                    break
        except FileNotFoundError:
            try:
                with open("lang.txt", "r") as file:
                    language=file.read()

                if language=="en":
                    print("Would you like to keep your current configuration?")
                    answer=input("Yes or No? ")

                    if answer.lower()=="yes" or answer.lower()=="ja":
                        language, ad, prompt, logg, upcheck=migrate_settings()
                        #try:
                        #    os.remove("ad settings.txt")
                        #    os.remove("lang.txt")
                        #    os.remove("logg.txt")
                        #    os.remove("platform.txt")
                        #    os.remove("system.txt")
                        #except FileNotFoundError:
                        #    pass

                    if answer.lower()=="no":
                        temp=""
                        #try:
                        #    os.remove("ad settings.txt")
                        #    os.remove("lang.txt")
                        #    os.remove("logg.txt")
                        #    os.remove("platform.txt")
                        #    os.remove("system.txt")
                        #except FileNotFoundError:
                        #    pass
                        settings_init()
                
                if language=="de":
                    print("Willst du die alten einstellungen behalten?")
                    answer=input("Ja oder Nein? ")

                    if answer.lower()=="yes" or answer.lower()=="ja":
                        language, ad, prompt, logg, upcheck=migrate_settings()
                        #try:
                        #    os.remove("ad settings.txt")
                        #    os.remove("lang.txt")
                        #    os.remove("logg.txt")
                        #    os.remove("platform.txt")
                        #    os.remove("system.txt")
                        #except FileNotFoundError:
                        #    pass

                    if answer.lower()=="no" or answer.lower()=="nein":
                        temp=""
                        #try:
                        #    os.remove("ad settings.txt")
                        #    os.remove("lang.txt")
                        #    os.remove("logg.txt")
                        #    os.remove("platform.txt")
                        #    os.remove("system.txt")
                        #except FileNotFoundError:
                        #    pass
                        settings_init()

            except FileNotFoundError:
                print("Settings_Init got run, uh oh...")
                settings_init()
    return

#the initialising phase of the code
def startup():
    global logg
    global error_reason
    global updatethread
    settingsload()
    if release==True:
        version=rversion
    elif release==False:
        version==bversion
    updatethread=Thread(target=update, args=(release, language, ))
    updatethread.start()
    while True:
        try:
            logg_file=open("logg.txt", "r")
            logg=logg_file.read()
            logg_file.close()
        except FileNotFoundError:
            #logg_settings(init, language)
            logg_file=open("logg.txt", "r")
            logg=logg_file.read()
            logg_file.close()
        if ad=="true":
            free_ad(language, logg)
        if init=="false":
            #the thread that updates the time in the title
            timethread=Thread(target=title_time, args=(stop_event, language))
            timethread.start()

        if sys=="'Linux'":
            print("Warning: it is a Known issue that the time is not updating until the Next line is written. that may be fixed in newer versions!")

        if language == "de":
            print(f"\nWilkommen beim Text converter, wenn es das erste mal ist das du benutzt, es gibt den befehl: help")
        if language == "en":
            print(f"\nWelcome at the text converter, if that is the first time that you use it, there is the command: help")

        main_thread()

#the main part of the code
def main_thread():
    global init
    global stop_event
    global check_init_time
    print(f"\n{language} {ad} {prompt} {upcheck} {logg}")
    try:
        try:
            while True:
                name=getpass.getuser()
                host=socket.gethostname()
                init="true"
                if upcheck==True:
                    updatethread.join()
                if check_init_time==True:
                    end=datetime.now()
                    computed=end-start
                    print(f"\nThe project needed {computed} Seconds to start.\n")
                    check_init_time=False
                comand=input(f"{name}@{host}:~$ ")
                
                text=comand
                log_info(text, logg)
                
                if comand.lower()=="phex" or comand.lower()=="pbin" or comand.lower()=="legacy pbin" or comand.lower()=="hex" or comand.lower()=="bin" or comand.lower()=="ascii" or comand.lower()=="leetcode" or comand.lower()=="brainfuck" or comand.lower()=="base64":
                    convert(comand, language, logg, name)

                if comand.lower()=="help":
                    helper(language, logg)

                if comand.lower()=="get game":
                    get_game(language, logg)
                
                if comand.lower()=="ad setting":
                    #ad_settings(language, logg)
                    temp=""
                
                if comand.lower()=="set language":
                    stop_event.set()
                    change_settings(language, setting="language")
                    init="false"
                    stop_event = ""
                    stop_event = Event()
                    return
                
                if comand.lower()=="clear screen":
                    if sys.lower()=="windows":
                        os.system("cls")

                    if sys.lower()=="linux":
                        os.system("clear")
                
                if comand.lower()=="reset":
                    stop_event.set()
                    if sys.lower()=="windows":
                        os.system("cls")
                    
                    if sys.lower()=="linux":
                        os.system("cleear")
                    init="false"
                    stop_event = ""
                    stop_event = Event()
                    return
                
                if comand.lower()=="exit":
                    close(language, sys)
                
                if comand.lower()=="halt":
                    stop_event.set()
                    exit()
        except TypeError:
            if language=="en":
                print(f"\nThere has been an unexpected Error on Startup time check.\n")
            if language=="de":
                print(f"\nDas war ein unerwarteter Fehler beim startzeit Check.\n")
            sleep(5)
            stop_event.set()
            exit()

    except KeyboardInterrupt:
        close(language, sys)

count=0

def close(language, sys):
    global count
    
    if sys.lower()=="windows":
        os.system("cls")

    if sys.lower()=="linux":
        os.system("clear")
    while True:
        try:

            if language=="en":
                answer=input("Do you wanna close that program? ")
                if answer.lower()=="no" or answer.lower()=="false":
                    return

            if language=="de":
                answer=input("Willst du das Program schliesen? ")
                if answer.lower()=="nein" or answer.lower()=="false":
                    return
        
            #t.sleep(4)
            if sys.lower()=="windows":
                os.system("cls")

            if sys.lower()=="linux":
                os.system("clear")
                timethread=False
            stop_event.set()
            exit()

        except KeyboardInterrupt:
            print("Do you wanna Close that?")

startup()