#importing time from time to look about the Time needed to do the initialisation part
from datetime import datetime
start=datetime.now()

def ModuleRecovery(module):
    if module == "requests":
        os.system("pip install requests")

    if module == "converter":
        data=""
        out=base64.b64decode(data)
        with open("converter.py", "w") as save:
            save.write(out)
    
    if module == "learn":
        data="aW1wb3J0IHdlYmJyb3dzZXIgYXMgd2ViDQpmcm9tIGxvZ2dlciBpbXBvcnQgbG9nX2luZm8NCmZyb20gc2V0dGluZ3MgaW1wb3J0IGFkX21ha2VmaWxlDQoNCmRlZiBmcmVlX2FkKGxhbmd1YWdlLCBsb2dnKToNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgYWRfc2V0dGluZyA9IG9wZW4oImFkIHNldHRpbmcudHh0IiwgInIiKS5yZWFkKCkNCiAgICAgICAgICAgICAgICBpZiBhZF9zZXR0aW5nPT0idHJ1ZSI6DQogICAgICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlPT0iZGUiOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcbltBRF0gU3BpZWwgbWFsIHdoaWxlIFRydWU6IGxlYXJuKCksIGVzIGlzdCBlaW4gZ3V0ZXMgc3BpZWwuXG5XbyBtYW4gZGFzIFNwaWVsIGhvbGVuIGthbm4gc2llaHQgbWFuIG1pdCBkZW0gY29tbWFuZDogZ2V0IGdhbWVcbldlbm4gZHUgZGllc2Ugd2VyYnVuZyBuaWNodCBtZXIgc2VoZW4gd2lsbHN0LCBzY2hyZWliOiBhZCBzZXR0aW5nXG4iKQ0KICAgICAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZT09ImVuIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5bQURdIFBsYXkgd2hpbGUgVHJ1ZTogbGVhcm4oKSwgaXQncyBhIGdvb2QgZ2FtZS5cbllvdSBjYW4gc2VlIHdoZXJlIHlvdSBjYW4gZ2V0IHRoZSBnYW1lIHdpdGggdGhlIGNvbW1hbmQ6IGdldCBnYW1lXG5JZiB5b3UgZG9uJ3Qgd2FudCB0byBzZWUgdGhpcyBhZCBhZ2Fpbiwgd3JpdGU6IGFkIHNldHRpbmdcbiIpDQogICAgICAgICAgICAgICAgICAgIHRleHQ9IkFkIGhhcyBiZWVuIGRlbGl2ZXJlZC4iDQogICAgICAgICAgICAgICAgICAgIGxvZ19pbmZvKHRleHQsIGxvZ2cpDQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgICAgIGFkX21ha2VmaWxlKGxvZ2cpDQoNCiAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgcmV0dXJuDQoNCmRlZiBnZXRfZ2FtZShsYW5ndWFnZSwgbG9nZyk6DQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgbGFuZ3VhZ2U9PSJkZSI6DQogICAgICAgICAgICAgICAgcHJpbnQoIkRhIHNpbmQgZGllc2UgU3RvcmVzOlxuMS4gc3RlYW1cbjIuIGVwaWMgZ2FtZXMgc3RvcmVcbjMuIGh1bWJsZVxuNC4gR29vZ2xlIFBsYXlcbjUuIEFwcGxlIFN0b3JlXG42LiBOaW50ZW5kb1xuNy4gUGxheXN0YXRpb24gNFxuOC4gR2FsYXh5IFN0b3JlXG45LiBnb2dcbjEwLiBsdWRlbi5pb1xuMTEuIEV4aXQgZ2VodCB6dXLDvGNrIHp1bSB0ZXh0IGNvbnZlcnRlciBQcm9qZWt0LiIpDQogICAgICAgICAgICAgICAgYW5zPWlucHV0KCJWb24gd2VsY2hlbSBzdG9yZSBtw7ZjaHRlc3QgZHUgZXM6ICIpDQogICAgICAgICAgICAgICAgdGV4dD1hbnMNCiAgICAgICAgICAgICAgICBsb2dfaW5mbyh0ZXh0LCBsb2dnKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0ic3RlYW0iIG9yIGFucy5sb3dlcigpPT0iMSI6DQogICAgICAgICAgICAgICAgICAgIHdlYi5vcGVuKCJodHRwczovL3N0b3JlLnN0ZWFtcG93ZXJlZC5jb20vYXBwLzYxOTE1MC93aGlsZV9UcnVlX2xlYXJuLyIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJlcGljIGdhbWVzIHN0b3JlIiBvciBhbnMubG93ZXIoKT09IjIiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly93d3cuZXBpY2dhbWVzLmNvbS9zdG9yZS9lbi1VUy9wL3doaWxlLXRydWUtbGVhcm4iKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0iaHVtYmxlIiBvciBhbnMubG93ZXIoKT09IjMiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly93d3cuaHVtYmxlYnVuZGxlLmNvbS9zdG9yZS93aGlsZS10cnVlLWxlYXJuIikNCiAgICAgICAgICAgICAgICBpZiBhbnMubG93ZXIoKT09Imdvb2dsZSBwbGF5IiBvciBhbnMubG93ZXIoKT09IjQiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5uaXZhbC53dGxtIikNCiAgICAgICAgICAgICAgICBpZiBhbnMubG93ZXIoKT09ImFwcGxlIHN0b3JlIiBvciBhbnMubG93ZXIoKT09IjUiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL2FwcC93aGlsZS10cnVlLWxlYXJuL2lkMTQ0MzU2OTEyNCIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJzd2l0Y2ggc3RvcmUiIG9yIGFucy5sb3dlcigpPT0iNiI6DQogICAgICAgICAgICAgICAgICAgIHdlYi5vcGVuKCJodHRwczovL3d3dy5uaW50ZW5kby5jb20vZ2FtZXMvZGV0YWlsL3doaWxlLXRydWUtbGVhcm4tc3dpdGNoLyIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJwbGF5c3RhdGlvbiA0IiBvciBhbnMubG93ZXIoKT09IjciOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly9zdG9yZS5wbGF5c3RhdGlvbi5jb20vZW4tdXMvcHJvZHVjdC9VUDMzOTAtQ1VTQTIwNDQ5XzAwLUFBQUFBQUEwMDAwMDAwMDEiKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0iZ2FsYXh5IHN0b3JlIiBvciBhbnMubG93ZXIoKT09IjgiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cDovL2dhbGF4eXN0b3JlLnNhbXN1bmcuY29tL2RldGFpbC9jb20ubml2YWwud3RsbS5ncyIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJnb2ciIG9yIGFucy5sb3dlcigpPT0iOSI6DQogICAgICAgICAgICAgICAgICAgIHdlYi5vcGVuKCJodHRwczovL3d3dy5nb2cuY29tL2dhbWUvd2hpbGVfdHJ1ZV9sZWFybiIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJsdWRlbi5pbyIgb3IgYW5zLmxvd2VyKCk9PSIxMCI6DQogICAgICAgICAgICAgICAgICAgIHdlYi5vcGVuKCJodHRwczovL2x1ZGVuLmlvL3d0bC8iKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0iZXhpdCIgb3IgYW5zLmxvd2VyKCk9PSIxMSI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KCkNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJzb3JyeSwgZGllc2VyIHN0b3JlIGhhdCBkYXMgc3BpZWwgaW4gZGVyIHZlcnNpb24gdm9uIGRpZXNlbSBXZXJidW5nIG1vZHVsLiA6KFxuIikNCg0KICAgICAgICAgICAgaWYgbGFuZ3VhZ2U9PSJlbiI6DQogICAgICAgICAgICAgICAgcHJpbnQoInRoZXJlIGFyZSB0aG9zZSBzdG9yZXM6XG4xLiBzdGVhbVxuMi4gZXBpYyBnYW1lcyBzdG9yZVxuMy4gaHVtYmxlXG40LiBHb29nbGUgUGxheVxuNS4gQXBwbGUgU3RvcmVcbjYuIE5pbnRlbmRvXG43LiBQbGF5c3RhdGlvbiA0XG44LiBHYWxheHkgU3RvcmVcbjkuIGdvZ1xuMTAuIEV4aXQgZ29lcyB0byB0aGUgVGV4dCBjb252ZXJ0ZXIgUHJvamVjdC4iKQ0KICAgICAgICAgICAgICAgIGFucz1pbnB1dCgiZnJvbSB3aGF0IHN0b3JlIGRvIHlvdSB3YW50IGl0OiAiKQ0KICAgICAgICAgICAgICAgIHRleHQ9YW5zDQogICAgICAgICAgICAgICAgbG9nX2luZm8odGV4dCkNCiAgICAgICAgICAgICAgICBpZiBhbnMubG93ZXIoKT09InN0ZWFtIiBvciBhbnMubG93ZXIoKT09IjEiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2FwcC82MTkxNTAvd2hpbGVfVHJ1ZV9sZWFybi8iKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0iZXBpYyBnYW1lcyBzdG9yZSIgb3IgYW5zLmxvd2VyKCk9PSIyIjoNCiAgICAgICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vd3d3LmVwaWNnYW1lcy5jb20vc3RvcmUvZW4tVVMvcC93aGlsZS10cnVlLWxlYXJuIikNCiAgICAgICAgICAgICAgICBpZiBhbnMubG93ZXIoKT09Imh1bWJsZSIgb3IgYW5zLmxvd2VyKCk9PSIzIjoNCiAgICAgICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vd3d3Lmh1bWJsZWJ1bmRsZS5jb20vc3RvcmUvd2hpbGUtdHJ1ZS1sZWFybiIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJnb29nbGUgcGxheSIgb3IgYW5zLmxvd2VyKCk9PSI0IjoNCiAgICAgICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vcGxheS5nb29nbGUuY29tL3N0b3JlL2FwcHMvZGV0YWlscz9pZD1jb20ubml2YWwud3RsbSIpDQogICAgICAgICAgICAgICAgaWYgYW5zLmxvd2VyKCk9PSJhcHBsZSBzdG9yZSIgb3IgYW5zLmxvd2VyKCk9PSI1IjoNCiAgICAgICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9hcHAvd2hpbGUtdHJ1ZS1sZWFybi9pZDE0NDM1NjkxMjQiKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0ic3dpdGNoIHN0b3JlIiBvciBhbnMubG93ZXIoKT09IjYiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly93d3cubmludGVuZG8uY29tL2dhbWVzL2RldGFpbC93aGlsZS10cnVlLWxlYXJuLXN3aXRjaC8iKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0icGxheXN0YXRpb24gNCIgb3IgYW5zLmxvd2VyKCk9PSI3IjoNCiAgICAgICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHBzOi8vc3RvcmUucGxheXN0YXRpb24uY29tL2VuLXVzL3Byb2R1Y3QvVVAzMzkwLUNVU0EyMDQ0OV8wMC1BQUFBQUFBMDAwMDAwMDAxIikNCiAgICAgICAgICAgICAgICBpZiBhbnMubG93ZXIoKT09ImdhbGF4eSBzdG9yZSIgb3IgYW5zLmxvd2VyKCk9PSI4IjoNCiAgICAgICAgICAgICAgICAgICAgd2ViLm9wZW4oImh0dHA6Ly9nYWxheHlzdG9yZS5zYW1zdW5nLmNvbS9kZXRhaWwvY29tLm5pdmFsLnd0bG0uZ3MiKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0iZ29nIiBvciBhbnMubG93ZXIoKT09IjkiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly93d3cuZ29nLmNvbS9nYW1lL3doaWxlX3RydWVfbGVhcm4iKQ0KICAgICAgICAgICAgICAgIGlmIGFucy5sb3dlcigpPT0ibHVkZW4uaW8iIG9yIGFucy5sb3dlcigpPT0iMTAiOg0KICAgICAgICAgICAgICAgICAgICB3ZWIub3BlbigiaHR0cHM6Ly9sdWRlbi5pby93dGwvIikNCiAgICAgICAgICAgICAgICBpZiBhbnMubG93ZXIoKT09ImV4aXQiIG9yIGFucy5sb3dlcigpPT0iMTEiOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgpDQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiaSdtIHNvcnJ5LCB0aGF0IHNob3AgaGFzIGluIHRoYXQgbW9kdWxlIHZlcnNpb24gbm90IHRoZSBnYW1lLiA6KFxuIikNCiAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgcmV0dXJu"
        out=base64.b64decode(data)
        with open("learn.py", "w") as save:
            save.write(out)

    if module == "logger":
        data="aW1wb3J0IGxvZ2dpbmcNCmZyb20gZGF0ZXRpbWUgaW1wb3J0ICoNCmltcG9ydCBvcw0KDQpkZWYgbG9nX2luaXQobG9nZ19tYWtlZmlsZSk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0idHJ1ZSI6DQogICAgICAgICAgICBub3c9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgICAgIHRpbWU9bm93LnN0cmZ0aW1lKCIlZC4lbS4lWSAlSC4lTS4lUyIpDQogICAgICAgICAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGZpbGVuYW1lPWYibG9ncy97dGltZX0gbG9nZy50eHQiLCBmaWxlbW9kZT0idyIsIGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKG1lc3NhZ2UpcyIsIGRhdGVmbXQ9IiVkLyVtLyVZICVIOiVNOiVTIikNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0iZmFsc2UiOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBvcy5ta2RpcigibG9ncyIpDQogICAgICAgIGxvZ19pbml0KGxvZ2dfbWFrZWZpbGUpDQoNCmRlZiBsb2dfc3lzdGVtKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltTWVNURU1dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2luZm8odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW0lORk9dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX3dhcm4odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW1dBUk5JTkddIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy53YXJuKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2Vycm9yKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltFUlJPUl0ge3RleHR9Ig0KICAgICAgICBsb2dnaW5nLmVycm9yKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0K"
        out=base64.b64decode(data)
        with open("logger.py", "w") as save:
            save.write(out)

    if module == "settings":
        data="aW1wb3J0IGxvZ2dpbmcNCmZyb20gZGF0ZXRpbWUgaW1wb3J0ICoNCmltcG9ydCBvcw0KDQpkZWYgbG9nX2luaXQobG9nZ19tYWtlZmlsZSk6DQogICAgdHJ5Og0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0idHJ1ZSI6DQogICAgICAgICAgICBub3c9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgICAgIHRpbWU9bm93LnN0cmZ0aW1lKCIlZC4lbS4lWSAlSC4lTS4lUyIpDQogICAgICAgICAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKGZpbGVuYW1lPWYibG9ncy97dGltZX0gbG9nZy50eHQiLCBmaWxlbW9kZT0idyIsIGxldmVsPWxvZ2dpbmcuSU5GTywgZm9ybWF0PSIlKGFzY3RpbWUpcyAlKG1lc3NhZ2UpcyIsIGRhdGVmbXQ9IiVkLyVtLyVZICVIOiVNOiVTIikNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICBpZiBsb2dnX21ha2VmaWxlPT0iZmFsc2UiOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBvcy5ta2RpcigibG9ncyIpDQogICAgICAgIGxvZ19pbml0KGxvZ2dfbWFrZWZpbGUpDQoNCmRlZiBsb2dfc3lzdGVtKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltTWVNURU1dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2luZm8odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW0lORk9dIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy5pbmZvKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX3dhcm4odGV4dCwgbG9nZyk6DQogICAgaWYgbG9nZz09InRydWUiOg0KICAgICAgICB0ZXh0PWYiW1dBUk5JTkddIHt0ZXh0fSINCiAgICAgICAgbG9nZ2luZy53YXJuKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0KDQpkZWYgbG9nX2Vycm9yKHRleHQsIGxvZ2cpOg0KICAgIGlmIGxvZ2c9PSJ0cnVlIjoNCiAgICAgICAgdGV4dD1mIltFUlJPUl0ge3RleHR9Ig0KICAgICAgICBsb2dnaW5nLmVycm9yKHRleHQpDQogICAgICAgIHJldHVybg0KICAgIGlmIGxvZ2c9PSJmYWxzZSI6DQogICAgICAgIHJldHVybg0K"
        out=base64.b64decode(data)
        with open("settings.py", "w") as save:
            save.write(out)
    
    if module == "timeread":
        data="aW1wb3J0IG9zDQppbXBvcnQgc3lzIGFzIHN5c3QNCmZyb20gdGltZSBpbXBvcnQgIHNsZWVwDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KZnJvbSB0aHJlYWRpbmcgaW1wb3J0IFRocmVhZA0KDQpmcm9tIGxvZ2dlciBpbXBvcnQgbG9nX2luZm8NCg0KZGVmIHRpbWVyZWFkZXIobGFuZ3VhZ2UsIGxvZ2cpOg0KICAgIGlmIGxhbmd1YWdlID09ICJlbiI6DQogICAgICAgIG5vdz1kYXRldGltZS5ub3coKQ0KICAgICAgICBwcmludChmIlxuVGhlIHRpbWUgaXM6Iiwgbm93LnN0cmZ0aW1lKCIlbS8lZC8lWSwgJXIiKSwgIlxuIikNCg0KICAgICAgICB0ZXh0PWRhdGV0aW1lLm5vdygpDQogICAgICAgIHRleHQ9dGV4dC5zdHJmdGltZSgiJW0vJWQvJVksICVyIikNCiAgICAgICAgbG9nX2luZm8odGV4dCwgbG9nZykNCg0KICAgICAgICByZXR1cm4NCg0KICAgIGlmIGxhbmd1YWdlID09ICJkZSI6DQogICAgICAgIG5vdz1kYXRldGltZS5ub3coKQ0KICAgICAgICBwcmludChmIlxuRGllIHplaXQgaXN0OiIsIG5vdy5zdHJmdGltZSgiJWQvJW0vJVksICVIOiVNOiVTIiksICJcbiIpDQoNCiAgICAgICAgDQogICAgICAgIHRleHQ9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgdGV4dD10ZXh0LnN0cmZ0aW1lKCIlZC8lbS8lWSwgJUg6JU06JVMiKQ0KICAgICAgICBsb2dfaW5mbyh0ZXh0LCBsb2dnKQ0KDQogICAgICAgIHJldHVybg0KDQpkZWYgdGl0bGVfdGltZShzdG9wX2V2ZW50LCBsYW5ndWFnZSk6DQogICAgc3lzPW9wZW4oInN5c3RlbS50eHQiLCAiciIpLnJlYWQoKQ0KICAgIHdoaWxlIG5vdCBzdG9wX2V2ZW50LmlzX3NldCgpOg0KICAgICAgICBpZiBzeXM9PSJXaW5kb3dzIjoNCiAgICAgICAgICAgIG5vdz1kYXRldGltZS5ub3coKQ0KICAgICAgICAgICAgaWYgbGFuZ3VhZ2U9PSJkZSI6DQogICAgICAgICAgICAgICAgbm93PW5vdy5zdHJmdGltZSgiJWQvJW0vJVksICVIOiVNOiVTIikNCiAgICAgICAgICAgIGlmIGxhbmd1YWdlPT0iZW4iOg0KICAgICAgICAgICAgICAgIG5vdz1ub3cuc3RyZnRpbWUoIiVtLyVkLyVZLCAlciIpDQoNCiAgICAgICAgICAgIG9zLnN5c3RlbShmInRpdGxlIFRleHQgQ29udmVydGVyIFYyLjMge25vd30iKQ0KICAgICAgICAgICAgc2xlZXAoMSkNCg0KICAgICAgICBpZiBzeXM9PSJMaW51eCI6DQogICAgICAgICAgICBub3c9ZGF0ZXRpbWUubm93KCkNCiAgICAgICAgICAgIG5vdz1ub3cuc3RyZnRpbWUoIiVkLyVtLyVZLCAlSDolTTolUyIpDQogICAgICAgICAgICBzeXN0LnN0ZG91dC53cml0ZShmIlx4MWJdMjtUZXh0IENvbnZlcnRlciBWMi4zIHtub3d9XHgwNyIpDQogICAgICAgICAgICAjcHJpbnQoIlRpbWUgVXBkYXRlZCIpIHNvbWVob3cgdGhhdCBmaXhlcyB0aGUgdGl0bGUuLi4NCiAgICAgICAgICAgIHNsZWVwKDEpDQogICAgI2V4aXQoKQ0K"
        out=base64.b64decode(data)
        with open("timeread.py", "w") as save:
            save.write(out)
    
    if module == "updater":
        data="I2ltcG9ydGluZyB0aGUgbmVlZGVkIG1vZHVsZXMNCmltcG9ydCByZXF1ZXN0cw0KaW1wb3J0IG9zDQoNCiNWYXJpYWJsZXMgZm9yIHRoZSBjb2RlDQpsaW5rPSJodHRwczovL2dpdGh1Yi5jb20vQ2hhb3NtaW5lY3JhZnQvVGV4dC1jb252ZXJ0ZXIvcmVsZWFzZXMvIg0KcnZlcnNpb249IjIuMyINCmJ2ZXJzaW9uPSIyLjMiDQoNCiN0aGUgbWFpbiBmdW5jdGlvbiBvZiB0aGF0IGNvZGUNCmRlZiB1cGRhdGUocmVsZWFzZSwgbGFuZ3VhZ2UpOg0KICAgIHRyeTogI1RyeWluZyB0byBDaGVjayBmb3IgdXBkYXRlcw0KICAgICAgICBpZiByZWxlYXNlPT0idHJ1ZSI6DQogICAgICAgICAgICAgICAgdXJsID0gImh0dHBzOi8vd3d3LmRyb3Bib3guY29tL3MvYTV3Yzdvb242OG56OWlvL3ZlcnNpb24tYmV0YS50eHQ/ZGw9MSINCiAgICAgICAgICAgICAgICBuZXdfdmVyc2lvbiA9IHJlcXVlc3RzLmdldCh1cmwsIGFsbG93X3JlZGlyZWN0cz1UcnVlKQ0KICAgICAgICAgICAgICAgIG9wZW4oInJlbGVhc2UtdmVyc2lvbi50eHQiLCAid2IiKS53cml0ZShuZXdfdmVyc2lvbi5jb250ZW50KQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmIG5ld192ZXJzaW9uPnJ2ZXJzaW9uOg0KICAgICAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJlbiI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVGhlcmUgaXMgYW4gbmV3IHZlcnNpb246IHtuZXdfdmVyc2lvbn1cblRoZXJlIGlzIGRvd25sb2FkIHRoZSBsaW5rOuKGk1xue2xpbmt9XG4iKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImRlIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5EYSBpc3QgZWluZSBuZXVlIFZlcnNpb246IHtuZXdfdmVyc2lvbn1cbkRhIGlzdCBkZXIgbGluayB6dW0gaGVydW50ZXJsYWRlbjrihpNcbntsaW5rfVxuIikNCg0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZXJlIGlzIGFuIG5ldyB2ZXJzaW9uOiB7bmV3X3ZlcnNpb259XG5UaGVyZSBpcyB0aGUgZG93bmxvYWQgbGluazrihpNcbntsaW5rfVxuIikNCg0KICAgICAgICAgICAgICAgIGlmIG5ld192ZXJzaW9uPT1ydmVyc2lvbjoNCiAgICAgICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZW4iOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZSB2ZXJzaW9uIGlzIHRoZSBsYXRlc3QgdmVyc2lvbiBhdCB0aGUgbW9tZW50LlxuIikNCg0KICAgICAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJkZSI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuRGFzIGlzdCBkaWUgbmV1c3RlIHZlcnNpb24gaW0gbW9tZW50LlxuIikNCg0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZSB2ZXJzaW9uIGlzIHRoZSBsYXRlc3QgdmVyc2lvbiBhdCB0aGUgbW9tZW50LlxuIikNCg0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImVuIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5VTktOT1dOIFZFUlNJT04uXG4iKQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImRlIjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5VTkJFS0FOTlRFIFZFUlNJT05cbiIpDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblVOS05PV04gVkVSU0lPTi5cbiIpDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIA0KICAgICAgICBpZiByZWxlYXNlPT0iZmFsc2UiOg0KICAgICAgICAgICAgdXJsPSJodHRwczovL3d3dy5kcm9wYm94LmNvbS9zL2E1d2M3b29uNjhuejlpby92ZXJzaW9uLWJldGEudHh0P2RsPTEiDQogICAgICAgICAgICBuZXdfdmVyc2lvbj1yZXF1ZXN0cy5nZXQodXJsLCBhbGxvd19yZWRpcmVjdHM9VHJ1ZSkNCiAgICAgICAgICAgIG9wZW4oImJldGEtdmVyc2lvbi50eHQiLCAid2IiKS53cml0ZShuZXdfdmVyc2lvbi5jb250ZW50KQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiBuZXdfdmVyc2lvbj5idmVyc2lvbjoNCiAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJlbiI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVGhlcmUgaXMgYW4gbmV3IGJldGEgdmVyc2lvbjoge25ld192ZXJzaW9ufVxuVGhlcmUgaXMgZG93bmxvYWQgdGhlIGxpbms64oaTXG57bGlua31cbiIpDQoNCiAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJkZSI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5EYSBpc3QgZWluZSBuZXVlIGJldGEgdmVyc2lvbjoge25ld192ZXJzaW9ufVxuRGEgaXN0IGRlciBsaW5rIHp1bSBoZXJ1bnRlcmxhZGVuOuKGk1xue2xpbmt9XG4iKQ0KDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZXJlIGlzIGFuIG5ldyBiZXRhIHZlcnNpb246IHtuZXdfdmVyc2lvbn1cblRoZXJlIGlzIHRoZSBkb3dubG9hZCBsaW5rOuKGk1xue2xpbmt9XG4iKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZiBuZXdfdmVyc2lvbj09YnZlcnNpb246DQogICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZW4iOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZSB2ZXJzaW9uIGlzIHRoZSBsYXRlc3QgYmV0YSB2ZXJzaW9uIGF0IHRoZSBtb21lbnQuXG4iKQ0KDQogICAgICAgICAgICAgICAgaWYgbGFuZ3VhZ2UubG93ZXIoKSA9PSAiZGUiOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuRGFzIGlzdCBkaWUgbmV1c3RlIGJldGEgdmVyc2lvbiBpbSBtb21lbnQuXG4iKQ0KDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblRoZSB2ZXJzaW9uIGlzIHRoZSBsYXRlc3QgdmVyc2lvbiBhdCB0aGUgbW9tZW50LlxuIikNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBpZiBsYW5ndWFnZS5sb3dlcigpID09ICJlbiI6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG5VTktOT1dOIEJFVEEgVkVSU0lPTlxuIikNCg0KICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmxvd2VyKCkgPT0gImRlIjoNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcblVOQkVLQU5OVEUgQkVUQSBWRVJTSU9OXG4iKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxuVU5LTk9XTiBCRVRBIFZFUlNJT05cbiIpDQogICAgICAgICAgICByZXR1cm4NCg0KICAgICNObyBpbnRlcm5ldCBDb25uZWN0aW9uIGZvdW5kLCB1cGRhdGUgQ2hlY2tpbmcgY2FuJ3QgYmUgZG9uZS4NCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6ICN0aGFua3MgVGl6enlTYXVydXMgZm9yIGhlbHBpbmcgbWUgZ2V0dGluZyB0aGF0IGNhdGNoLiA6KQ0KICAgICAgICANCiAgICAgICAgaWYgbGFuZ3VhZ2U9PSJlbiI6DQogICAgICAgICAgICBwcmludChmIlxuQ3VycmVudGx5IHRoZXJlIGlzIG5vIGludGVybmV0LCBUcnkgY2hlY2tpbmcgZm9yIHVwZGF0ZXMgbGF0ZXIgd2hlbiBhIGludGVybmV0IGNvbm5lY3Rpb24gZXhpc3RzL2lzIHN0YWJsZS5cbiIpDQogICAgICAgICAgICANCiAgICAgICAgaWYgbGFuZ3VhZ2U9PSJkZSI6DQogICAgICAgICAgICBwcmludChmIlxuTW9tZW50YW4gaXN0IGRhIGtlaW4gaW50ZXJuZXQsIFZlcnN1Y2ggZXMgc3DDpHRlciBub2NobWFsIHdlbm4gZGllIEludGVybmV0dmVyYmluZHVuZyBkYSBpc3QvU3RhYmlsIGlzdC5cbiIpDQogICAgICAgICAgICANCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KGYiXG5DdXJyZW50bHkgdGhlcmUgaXMgbm8gaW50ZXJuZXQsIFRyeSBjaGVja2luZyBmb3IgdXBkYXRlcyBsYXRlciB3aGVuIGEgaW50ZXJuZXQgY29ubmVjdGlvbiBleGlzdHMvaXMgc3RhYmxlLlxuIikNCiAgICAgICAgICAgIA0KICAgICAgICByZXR1cm4NCg0KZGVmIFRlc3QoKToNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBsYW5ndWFnZT1pbnB1dCgiREUvRU4iKS5sb3dlcigpDQogICAgICAgIHJlbGVhc2U9aW5wdXQoIlRSVUUvRkFMU0UiKS5sb3dlcigpDQogICAgICAgIHVwZGF0ZShyZWxlYXNlLCBsYW5ndWFnZSkNCg0KI1Rlc3QoKQ=="
        out=base64.b64decode(out)
        with open("updater.py", "w") as save:
            save.write(out)

#importing the Needed modules
while True:
    try:
        count=0
        import requests
        count+=1
        if count>0:
            break
    except ImportError:
        module="requests"
        ModuleRecovery(module)

import getpass
import os as ost
import platform
import socket
import json
from threading import Thread, Event

#the Variables for the Logger module
logg="true"
logg_makefile="true"

#the Links for the download of older/newer versions.
dl_link="https://github.com/Chaosminecraft/Text-converter/releases/"
old_link="https://drive.google.com/open?id=16AcLcgRRLlM7chKUi4eHgT-NOfBCnArM"
old_repo="https://github.com/Chaosminecraft/Custom-Encoder"

#initial variable for ad and other stuff
ad="true"
upcheck="true"
module=""

temp=1

#for some reason that logging function is needed...
def log_module_load(module):
    global temp
    #print(f"{temp}times started the function.")
    temp+=1
    text=f"The module {module} has been loaded."
    log_system(text, logg)
    return

def log_module_error(module):
    text=f"The module {module} couldn't be loaded, please check the file for corruptions."
    log_error(text, logg)
    return

done = False



#custom modules are being imported now.
while True:
    try:
        module="logger"
        from logger import log_init, log_system, log_info, log_error
        log_init(logg_makefile) #making the log file
        log_module_load(module)
        module="settings"
        from settings import settings_init, change_settings, helper
        log_module_load(module)
        module="learn"
        from learn import free_ad, get_game
        log_module_load(module)
        module="updater"
        from updater import *
        log_module_load(module)
        module="converter"
        from converter import *
        log_module_load(module)
        module="timeread"
        from timeread import *
        log_module_load(module)
        done = True
        if done == True:
            break
    except ModuleNotFoundError:
        log_module_error(module)
        ModuleRecovery(module)
        #input(f"\nThere has been a import error, please check the logs in the logs folder.\nPress enter to Exit")
        #exit()

sys=platform.system()
ver=platform.release()
cpu=platform.machine()
#print(cpu)
arc=platform.architecture()[1]
system=f"{sys} {ver}"
with open("platform.txt", "w") as save:
    save.write(system)

with open("system.txt", "w") as save:
    save.write(sys)

if sys=="Windows":
    if ver>="10":
        print("The Recommend OS is used.")
    if ver=="8.1":
        print("That operating system should work.")
    if ver=="7":
        print("That is my Favourite OS, but problems may occure.")
    
if sys=="'Linux'":
    print("[WARNING] Linux is not checked anymore. it Might close. Continue?")
    answer=input("Yes/No ")
    if answer.lower()=="no" or answer.lower()=="nein":
        exit()
    else:
        pass

if sys=="Darwin":
    print("This platform is not supported!")
    input("press enter to exit")
    exit()


#email adress for project
mail="chaosminecraftmail@gmail.com"

#determins if release or not and determins the version.
release="true"
version="2.3"

#variables for the rest of startup
init="false"
check_init_time=True
change="false"
language="en"
error_reason=""
noinp="false"
content=""
condecon=""

while True:
    try:
        with open("settings.json", "r") as file:
            settings=json.load(file)
            language=settings.get("language")
            ad=settings.get("ad")
            prompt=settings.get("prompt")
            ldset=True
            if ldset==True:
                break
    except FileNotFoundError:
        settings_init()

stop_event = Event()

#the initialising phase of the code
def startup():
    global logg
    global language
    global error_reason
    while True:
        try:
            logg_file=open("logg.txt", "r")
            logg=logg_file.read()
            logg_file.close()
        except FileNotFoundError:
            #logg_settings(init, language)
            logg_file=open("logg.txt", "r")
            logg=logg_file.read()
            logg_file.close()
    
        free_ad(language, logg)
        if init=="false":
            #the thread that updates the time in the title
            timethread=Thread(target=title_time, args=(stop_event, language))
            timethread.start()

        if sys=="'Linux'":
            print("Warning: it is a Known issue that the time is not updating until the Next line is written. that may be fixed in newer versions!")

        if language == "de":
            print(f"\nWilkommen beim Text converter, wenn es das erste mal ist das du benutzt, es gibt den befehl: help")
        if language == "en":
            print(f"\nWelcome at the text converter, if that is the first time that you use it, there is the command: help")

        main_thread()

#the main part of the code
def main_thread():
    global init
    global stop_event
    global check_init_time
    print(f"\n{language} {ad} {prompt}")
    try:
        try:
            while True:
                name=getpass.getuser()
                host=socket.gethostname()
                init="true"
                if check_init_time==True:
                    end=datetime.now()
                    computed=end-start
                    print(f"\nThe project needed {computed} Seconds to start.\n")
                    check_init_time=False
                comand=input(f"{name}@{host}:~$ ")
                
                text=comand
                log_info(text, logg)
                
                if comand.lower()=="phex" or comand.lower()=="pbin" or comand.lower()=="legacy pbin" or comand.lower()=="hex" or comand.lower()=="bin" or comand.lower()=="ascii" or comand.lower()=="leetcode" or comand.lower()=="brainfuck" or comand.lower()=="base64":
                    convert(comand, language, logg, name)

                if comand.lower()=="help":
                    helper(language, logg)

                if comand.lower()=="get game":
                    get_game(language, logg)
                
                if comand.lower()=="ad setting":
                    #ad_settings(language, logg)
                    temp=""
                
                if comand.lower()=="set language":
                    pass
                    change="true"
                    stop_event.set()
                    #get_lang(language, change, init)
                    change="false" 
                    init="false"
                    stop_event = ""
                    stop_event = Event()
                    return
                
                if comand.lower()=="clear screen":
                    if sys.lower()=="windows":
                        os.system("cls")

                    if sys.lower()=="linux":
                        os.system("clear")
                
                if comand.lower()=="reset":
                    stop_event.set()
                    if sys.lower()=="windows":
                        os.system("cls")
                    
                    if sys.lower()=="linux":
                        os.system("cleear")
                    init="false"
                    stop_event = ""
                    stop_event = Event()
                    return
                
                if comand.lower()=="exit":
                    close(language, sys)
                
                if comand.lower()=="halt":
                    stop_event.set()
                    exit()
        except TypeError:
            if language=="en":
                print(f"\nThere has been an unexpected Error on Startup time check.\n")
            if language=="de":
                print(f"\nDas war ein unerwarteter Fehler beim startzeit Check.\n")
            sleep(5)
            stop_event.set()
            exit()

    except KeyboardInterrupt:
        close(language, sys)

count=0

def close(language, sys):
    global count
    try:
        if sys.lower()=="windows":
            os.system("cls")

        if sys.lower()=="linux":
            os.system("clear")

        if language=="en":
            answer=input("Do you wanna close that program? ")
            if answer.lower()=="no" or answer.lower()=="false":
                return

        if language=="de":
            answer=input("Willst du das Program schliesen? ")
            if answer.lower()=="nein" or answer.lower()=="false":
                return
        
        #t.sleep(4)
        if sys.lower()=="windows":
            os.system("cls")

        if sys.lower()=="linux":
            os.system("clear")
            timethread=False
        stop_event.set()
        exit()

    except KeyboardInterrupt:
        close_2(language)
        close(language)

def close_2(language):
    global count
    if count==0:
        print(f"\n\nyou're already on the Exit.\n")
        count+=1
        return
    if count==1:
        print(f"\n\nAre you seroius?\n")
        count+=1
        return
    if count==2:
        print(f"\n\nJust stop!\n")
        count+=1
        return
    if count==3:
        print(f"\n\nSTOP IT!!!\n")
        count+=1
        return
    if count==4:
        print(f"\n\nI'M SERIOUS, THIS IS PAINFUL!!!!\n")
        count+=1
        return
    if count<4 or count<10:
        print(f"\n\nThat is all i'm gonna say!\n")
        count+=1
        return
    if count<10 or count<20:
        print(f"\n\nSTOP IT!!! IT IS PAINFULL!!! I DON'T EVEN LIVE. I'M JUST SENTIENT!!!\n")
        count+=1
        return
    if count==20:
        print(f"\n\nLOOK WHAT YOU DONE!")
        message="YOU DONE THAT!"
        with open("OPEN_ME.txt", "w") as save:
            save.write(message)
        command="notepad.exe OPEN_ME.txt"
        os.system(command)
        os.remove("OPEN_ME.txt")
        stop_event.set()
        exit()

startup()